From ecc3d6757a8b608e02dabd0460384d39b1b53195 Mon Sep 17 00:00:00 2001
From: Purushottam Narayana <purushottam.narayana@lge.com>
Date: Fri, 28 Jul 2017 12:41:35 -0700
Subject: [PATCH] Extend drm plane properties

---
 drivers/gpu/drm/drm_crtc.c | 232 ++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 219 insertions(+), 13 deletions(-)

diff --git a/drivers/gpu/drm/drm_crtc.c b/drivers/gpu/drm/drm_crtc.c
index 3453844..9896124 100644
--- a/drivers/gpu/drm/drm_crtc.c
+++ b/drivers/gpu/drm/drm_crtc.c
@@ -2361,7 +2361,6 @@ static int __setplane_internal(struct drm_plane *plane,
 			       uint32_t src_w, uint32_t src_h)
 {
 	int ret = 0;
-
 	/* No fb means shut it down */
 	if (!fb) {
 		plane->old_fb = plane->fb;
@@ -2437,12 +2436,14 @@ static int setplane_internal(struct drm_plane *plane,
 			     uint32_t src_w, uint32_t src_h)
 {
 	int ret;
+        printk("\n setplane_internal ENTER");
 
 	drm_modeset_lock_all(plane->dev);
 	ret = __setplane_internal(plane, crtc, fb,
 				  crtc_x, crtc_y, crtc_w, crtc_h,
 				  src_x, src_y, src_w, src_h);
 	drm_modeset_unlock_all(plane->dev);
+        printk("\n setplane_internal EXIT");
 
 	return ret;
 }
@@ -4822,6 +4823,8 @@ int drm_mode_connector_property_set_ioctl(struct drm_device *dev,
 		.obj_type = DRM_MODE_OBJECT_CONNECTOR
 	};
 
+        printk("\n drm_mode_connector_property_set_ioctl ENTER");
+
 	/* It does all the locking and checking we need */
 	return drm_mode_obj_set_property_ioctl(dev, &obj_set_prop, file_priv);
 }
@@ -4891,6 +4894,203 @@ int drm_mode_plane_set_obj_prop(struct drm_plane *plane,
 }
 EXPORT_SYMBOL(drm_mode_plane_set_obj_prop);
 
+/*
+ * setplane_internal - setplane handler for internal callers
+ *
+ * Note that we assume an extra reference has already been taken on fb.  If the
+ * update fails, this reference will be dropped before return; if it succeeds,
+ * the previous framebuffer (if any) will be unreferenced instead.
+ *
+ * src_{x,y,w,h} are provided in 16.16 fixed point format
+ */
+static int __setplane_internal_custom(struct drm_plane *plane,
+			       struct drm_crtc *crtc,
+			       struct drm_framebuffer *fb,
+			       int32_t crtc_x, int32_t crtc_y,
+			       uint32_t crtc_w, uint32_t crtc_h,
+			       uint32_t src_x, uint32_t src_y,
+			       uint32_t src_w, uint32_t src_h)
+{
+	int ret = 0;
+	/* No fb means shut it down */
+	if (!fb) {
+		plane->old_fb = plane->fb;
+		ret = plane->funcs->disable_plane(plane);
+		if (!ret) {
+			plane->crtc = NULL;
+			plane->fb = NULL;
+		} else {
+			plane->old_fb = NULL;
+		}
+		goto out;
+	}
+
+	/* Check whether this plane is usable on this CRTC */
+	if (!(plane->possible_crtcs & drm_crtc_mask(crtc))) {
+		DRM_DEBUG_KMS("Invalid crtc for plane\n");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	/* Check whether this plane supports the fb pixel format. */
+	ret = drm_plane_check_pixel_format(plane, fb->pixel_format);
+	if (ret) {
+		DRM_DEBUG_KMS("Invalid pixel format %s\n",
+				  drm_get_format_name(fb->pixel_format));
+		goto out;
+	}
+
+	/* Give drivers some help against integer overflows */
+	if (crtc_w > INT_MAX ||
+		crtc_x > INT_MAX - (int32_t) crtc_w ||
+		crtc_h > INT_MAX ||
+		crtc_y > INT_MAX - (int32_t) crtc_h) {
+		DRM_DEBUG_KMS("Invalid CRTC coordinates %ux%u+%d+%d\n",
+				  crtc_w, crtc_h, crtc_x, crtc_y);
+		ret = -ERANGE;
+		goto out;
+	}
+
+	ret = check_src_coords(src_x, src_y, src_w, src_h, fb);
+	if (ret)
+		goto out;
+
+	plane->old_fb = plane->fb;
+	ret = plane->funcs->update_plane(plane, crtc, fb,
+					 crtc_x, crtc_y, crtc_w, crtc_h,
+					 src_x, src_y, src_w, src_h);
+	if (!ret) {
+		plane->crtc = crtc;
+		plane->fb = fb;
+		fb = NULL;
+	} else {
+		plane->old_fb = NULL;
+	}
+
+out:
+	if (fb)
+		drm_framebuffer_unreference(fb);
+
+	plane->old_fb = NULL;
+
+	return ret;
+}
+
+int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *plan,
+								   struct drm_mode_obj_set_property *ar)
+{
+	int ret = -EINVAL;
+	struct drm_plane *plane = plan;
+	struct drm_crtc *crtc = plane->state->crtc;
+	struct drm_framebuffer *fb = plane->state->fb;
+	struct drm_mode_obj_set_property *arg = ar;
+	struct drm_plane_state state[4];
+	uint64_t mask = ~(~0 << 16);
+	uint16_t planeBase = 44;// Only single crtc is supported now.
+	int i = 0, j = 0;
+	uint16_t z[4] = {0}; //Maintain this globally later
+	uint8_t max_planes = 4;
+	struct io_rect {
+		/* Signed dest location allows it to be partially off screen */
+		int32_t crtc_x, crtc_y;
+		uint32_t crtc_w, crtc_h;
+
+		/* Source values are 16.16 fixed point */
+		uint32_t src_x, src_y;
+		uint32_t src_h, src_w;
+	} *scale_param;
+
+	printk("\n drm_mode_plane_set_custom_prop arg->value = %llx arg->prop_id = %x plane_id = %d",arg->value, arg->prop_id, arg->obj_id);
+
+	switch (arg->prop_id) {
+		case 0xff02:
+			memcpy(z, &arg->value, sizeof arg->value);
+			for (i = max_planes-1; i >= 0; i--) {
+				/* i + planeBase th Val = z[i] + planeBase th Val */
+				plane = drm_plane_find(plane->dev, z[i]+planeBase);
+				memcpy(state + i, plane->state, sizeof *(plane->state));
+				printk("\n storing %dth plane values to %d plane", z[i] + planeBase, i + planeBase);
+			}
+			for (i = max_planes-1; i >= 0; i--) {
+				plane = drm_plane_find(plane->dev, i + planeBase);
+				if (plane->state->fb && state[i].fb == NULL) {
+					printk("\n Disabling plane for z index %d", i);
+					/* Here you are setting NULL to ith index, then ith OLD_FB will be dereferenced so we should first
+					   set this OLD_FB to its new place and then set this plane to NULL search for i in z[], get its
+					   index (destination plane), take state[index] (only if valid) index+planebase get plane to it
+					   assign state[index]*/
+					for (j = 0; j < max_planes; j++) {
+						if (z[j] == i) {
+							/* We need not check state[j].fb is valid, coz if found its same as plane->state-fb
+							   which is already checked in the previous if */
+							ret =  __setplane_internal_custom(drm_plane_find(plane->dev, j + planeBase),state[j].crtc, state[j].fb,
+															  state[j].crtc_x, state[j].crtc_y,
+															  state[j].crtc_w, state[j].crtc_h,
+															  state[j].src_x, state[j].src_y,
+															  state[j].src_w, state[j].src_h);
+							break;
+						}
+					}
+				} else if (state[i].fb && (state[i].crtc == NULL || plane->crtc == NULL)) {
+					state[i].crtc = drm_crtc_find(dev, 43);
+					if (!state[i].crtc) {
+						printk("\n Unknown crtc ID \n");
+						return -ENOENT;
+					}
+				} else {
+					continue;
+				}
+				ret = __setplane_internal_custom(plane, state[i].crtc, state[i].fb,
+												 state[i].crtc_x, state[i].crtc_y,
+												 state[i].crtc_w, state[i].crtc_h,
+												 state[i].src_x, state[i].src_y,
+												 state[i].src_w, state[i].src_h);
+			}
+			return ret;
+		case 0xff03:
+			scale_param = (struct io_rect *) arg->value;
+			printk("src rect: %d %d %d %d", scale_param->src_x, scale_param->src_y,
+				   scale_param->src_w>>16, scale_param->src_h>>16);
+			printk("crtc rect: %d %d %d %d", scale_param->crtc_x, scale_param->crtc_y,
+				   scale_param->crtc_w, scale_param->crtc_h);
+			ret = __setplane_internal(plane, crtc, fb, scale_param->crtc_x, scale_param->crtc_y,
+									  scale_param->crtc_w, scale_param->crtc_h,
+									  scale_param->src_x, scale_param->src_y,
+									  scale_param->src_w << 16, scale_param->src_h << 16);
+
+			break;
+
+		case 0xff01:
+			printk("\n Going to look for framebuffer %d ", arg->value);
+			if (arg->value) {
+				fb = drm_framebuffer_lookup(plane->dev, arg->value);
+				if (!fb) {
+					DRM_DEBUG_KMS("Unknown framebuffer ID %d\n",
+								  arg->value);
+					printk("\n Unknown framebuffer ID %d ", arg->value);
+					return -ENOENT;
+				}
+			} else {
+				fb = 0;
+			}
+			if (!crtc) {
+				printk("\n plane %d is not initialized yet ");
+				return -ENOENT;
+			}
+			ret = __setplane_internal_custom(plane, crtc, fb,
+									  plane->state->crtc_x, plane->state->crtc_y,
+									  plane->state->crtc_w, plane->state->crtc_h,
+									  plane->state->src_x, plane->state->src_y,
+									  plane->state->src_w, plane->state->src_h);
+			break;
+		default:
+			printk("\n prop ID %d ", arg->prop_id);
+			return -ENOENT;
+	}
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_plane_set_custom_prop);
+
 /**
  * drm_mode_obj_get_properties_ioctl - get the current value of a object's property
  * @dev: DRM device
@@ -4974,9 +5174,15 @@ int drm_mode_obj_set_property_ioctl(struct drm_device *dev, void *data,
 		ret = -ENOENT;
 		goto out;
 	}
+
 	if (!arg_obj->properties)
 		goto out;
 
+	if (arg_obj->type == DRM_MODE_OBJECT_PLANE && ((arg->prop_id >> 4) == 0xff0)) {
+		ret = drm_mode_plane_set_custom_prop(dev, obj_to_plane(arg_obj), arg);
+		goto out;
+	}
+
 	for (i = 0; i < arg_obj->properties->count; i++)
 		if (arg_obj->properties->properties[i]->base.id == arg->prop_id)
 			break;
@@ -4985,7 +5191,7 @@ int drm_mode_obj_set_property_ioctl(struct drm_device *dev, void *data,
 		goto out;
 
 	prop_obj = drm_mode_object_find(dev, arg->prop_id,
-					DRM_MODE_OBJECT_PROPERTY);
+									DRM_MODE_OBJECT_PROPERTY);
 	if (!prop_obj) {
 		ret = -ENOENT;
 		goto out;
@@ -4996,17 +5202,17 @@ int drm_mode_obj_set_property_ioctl(struct drm_device *dev, void *data,
 		goto out;
 
 	switch (arg_obj->type) {
-	case DRM_MODE_OBJECT_CONNECTOR:
-		ret = drm_mode_connector_set_obj_prop(arg_obj, property,
-						      arg->value);
-		break;
-	case DRM_MODE_OBJECT_CRTC:
-		ret = drm_mode_crtc_set_obj_prop(arg_obj, property, arg->value);
-		break;
-	case DRM_MODE_OBJECT_PLANE:
-		ret = drm_mode_plane_set_obj_prop(obj_to_plane(arg_obj),
-						  property, arg->value);
-		break;
+		case DRM_MODE_OBJECT_CONNECTOR:
+			ret = drm_mode_connector_set_obj_prop(arg_obj, property,
+												  arg->value);
+			break;
+		case DRM_MODE_OBJECT_CRTC:
+			ret = drm_mode_crtc_set_obj_prop(arg_obj, property, arg->value);
+			break;
+		case DRM_MODE_OBJECT_PLANE:
+			ret = drm_mode_plane_set_obj_prop(obj_to_plane(arg_obj),
+											  property, arg->value);
+			break;
 	}
 
 	drm_property_change_valid_put(property, ref);
-- 
1.9.1

