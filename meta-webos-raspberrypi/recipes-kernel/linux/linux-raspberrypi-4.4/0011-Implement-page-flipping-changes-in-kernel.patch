From b1419ee330f11770390b4199008bb4579e4252d3 Mon Sep 17 00:00:00 2001
From: Purushottam Narayana <purushottam.narayana@lge.com>
Date: Mon, 26 Feb 2018 16:58:11 -0800
Subject: [PATCH] Implement page flipping changes in kernel.

:Release Notes:
Implement page flipping feature to overcome glitches, tearing effects.

:Detailed Notes:
Page flipping will help to overcome tearing artifacts on video.
It also eliminates any glitches occuring while scaling in particular
during adaptive streaming and resolution change.

:Testing Performed:
Play YouTube, change resolution manually, check adaptive streaming and
ensured no glitches or scaling artifacts are seen on video.

:QA Notes:

:Issues Addressed:
[PLAT-51178] [webOS OSE]:Glitches are observed when a youtube video is played from Youtube App
[PLAT-51656] Implement Page Flipping for video renderer.
---
 drivers/gpu/drm/drm_crtc.c | 125 ++++++++++++++++++++++++++++++++-------------
 1 file changed, 90 insertions(+), 35 deletions(-)

diff --git a/drivers/gpu/drm/drm_crtc.c b/drivers/gpu/drm/drm_crtc.c
index 561ff50..abfe7b8 100644
--- a/drivers/gpu/drm/drm_crtc.c
+++ b/drivers/gpu/drm/drm_crtc.c
@@ -4921,8 +4921,14 @@ static int __setplane_internal_custom(struct drm_plane *plane,
 	int ret = 0;
 
 	if (!fb) {
-		plane->funcs->disable_plane(plane);
-		plane->fb = NULL;
+		plane->old_fb = plane->fb;
+		ret = plane->funcs->disable_plane(plane);
+		if (!ret) {
+			plane->crtc = NULL;
+			plane->fb = NULL;
+		} else {
+			plane->old_fb = NULL;
+		}
 		goto out;
 	}
 
@@ -4969,6 +4975,11 @@ static int __setplane_internal_custom(struct drm_plane *plane,
 	}
 
 out:
+	if (fb)
+		drm_framebuffer_unreference(fb);
+	if (plane->old_fb)
+		drm_framebuffer_unreference(plane->old_fb);
+
 	plane->old_fb = NULL;
 	return ret;
 }
@@ -4990,6 +5001,8 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 	uint8_t max_planes = 4;
 	uint32_t crtc_id = 43;
 	uint16_t planeBase = 44;// Only single crtc is supported now.
+	bool framearrived = false;
+	struct drm_framebuffer *fbs = NULL;
 	struct io_rect {
 		/* Signed dest location allows it to be partially off screen */
 		int32_t crtc_x, crtc_y;
@@ -4998,7 +5011,16 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 		/* Source values are 16.16 fixed point */
 		uint32_t src_x, src_y;
 		uint32_t src_h, src_w;
-	} *scale_param;
+	};
+	struct ifb_rect {
+		/* Source values are 16.16 fixed point */
+		uint32_t src_x, src_y;
+		uint32_t src_w, src_h;
+		uint32_t fb_id; // Optional needed onl for 0xff05
+	};
+	struct io_rect scale_param;
+	struct ifb_rect scale_param_fb;
+	struct io_rect *scale_param_ip;
 
 	DRM_DEBUG_KMS("drm_mode_plane_set_custom_prop arg->value = %llx arg->prop_id = %x plane_id = %d \n",arg->value, arg->prop_id, arg->obj_id);
 
@@ -5048,51 +5070,60 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 			}
 			return ret;
 		case 0xff03:
-			scale_param = (struct io_rect *) arg->value;
-			DRM_DEBUG_KMS("src rect: %d %d %d %d \n", scale_param->src_x, scale_param->src_y,
-				   scale_param->src_w, scale_param->src_h);
-			DRM_DEBUG_KMS("crtc rect: %d %d %d %d \n", scale_param->crtc_x, scale_param->crtc_y,
-				   scale_param->crtc_w, scale_param->crtc_h);
+			memcpy((void *)&scale_param, (struct io_rect *)arg->value, sizeof(scale_param));
+			printk("ff03 src rect: %d %d %d %d \n", scale_param.src_x, scale_param.src_y,
+				   scale_param.src_w, scale_param.src_h);
+			DRM_DEBUG_KMS("ff03 crtc rect: %d %d %d %d \n", scale_param.crtc_x, scale_param.crtc_y,
+				   scale_param.crtc_w, scale_param.crtc_h);
 
 			/* BRCM RPI drivers gives div 0 exception when display width/height being 0 */
 			/* Scale param check is not required anymore as stack address passing is rectified in
 			 upper layer */
-			if (scale_param->crtc_w == 0 || scale_param->crtc_h == 0) {
+			if (scale_param.crtc_w == 0 || scale_param.crtc_h == 0) {
 				DRM_DEBUG_KMS("\n Invalid values, Dst rect width or height or both zeros");
 				return -ENOENT;
 			}
 
-			if (!plane->state->fb) {
+			if (plane->state->crtc_x == scale_param.crtc_x && plane->state->crtc_y == scale_param.crtc_y &&
+				plane->state->crtc_w == scale_param.crtc_w && plane->state->crtc_h == scale_param.crtc_h &&
+				plane->state->src_x == (scale_param.src_x << 16) && plane->state->src_y == (scale_param.src_y << 16) &&
+				plane->state->src_w == (scale_param.src_w << 16) && plane->state->src_h == (scale_param.src_h << 16)) {
+				DRM_DEBUG_KMS("ff03 No change in values");
+				return 0;
+			}
+
+			if (!plane->state->fb || (!scale_param.crtc_x && !scale_param.crtc_y && !framearrived)) {
 				DRM_DEBUG_KMS("\n No FB connected yet, store the values");
-				plane->state->crtc_x = scale_param->crtc_x;
-				plane->state->crtc_y = scale_param->crtc_y;
-				plane->state->crtc_w = scale_param->crtc_w;
-				plane->state->crtc_h = scale_param->crtc_h;
-
-				plane->state->src_x = scale_param->src_x;
-				plane->state->src_y = scale_param->src_y;
-				plane->state->src_w = scale_param->src_w << 16;
-				plane->state->src_h = scale_param->src_h << 16;
+				plane->state->crtc_x = scale_param.crtc_x;
+				plane->state->crtc_y = scale_param.crtc_y;
+				plane->state->crtc_w = scale_param.crtc_w;
+				plane->state->crtc_h = scale_param.crtc_h;
+
+				plane->state->src_x = scale_param.src_x << 16;
+				plane->state->src_y = scale_param.src_y << 16;
+				plane->state->src_w = scale_param.src_w << 16;
+				plane->state->src_h = scale_param.src_h << 16;
+				framearrived = false;
 				ret = 0;
 			} else {
-				ret = __setplane_internal_custom(plane, crtc, plane->state->fb, scale_param->crtc_x, scale_param->crtc_y,
-												 scale_param->crtc_w, scale_param->crtc_h,
-												 scale_param->src_x, scale_param->src_y,
-												 scale_param->src_w << 16, scale_param->src_h << 16);
+				DRM_DEBUG_KMS("Call __setplane_internal_custom");
+				ret = __setplane_internal_custom(plane, crtc, plane->state->fb, scale_param.crtc_x, scale_param.crtc_y,
+												 scale_param.crtc_w, scale_param.crtc_h,
+												 scale_param.src_x << 16, scale_param.src_y << 16,
+												 scale_param.src_w << 16, scale_param.src_h << 16);
 			}
 			break;
 		case 0xff04:
-			scale_param = (struct io_rect *) arg->value;
-			DRM_DEBUG_KMS("src rect: %d %d %d %d \n", scale_param->src_x, scale_param->src_y,
-				   scale_param->src_w, scale_param->src_h);
+			scale_param_ip = (struct io_rect *) arg->value;
+			DRM_DEBUG_KMS("src rect: %d %d %d %d \n", scale_param_ip->src_x, scale_param_ip->src_y,
+				   scale_param_ip->src_w, scale_param_ip->src_h);
 
 			if (!plane->state->fb) {
 				DRM_DEBUG_KMS("\n No FB connected yet, store the values");
-
-				plane->state->src_x = scale_param->src_x;
-				plane->state->src_y = scale_param->src_y;
-				plane->state->src_w = scale_param->src_w << 16;
-				plane->state->src_h = scale_param->src_h << 16;
+				plane->state->src_x = scale_param_ip->src_x << 16;
+				plane->state->src_y = scale_param_ip->src_y << 16;
+				plane->state->src_w = scale_param_ip->src_w << 16;
+				plane->state->src_h = scale_param_ip->src_h << 16;
 				ret = 0;
 			} else {
 				DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
@@ -5104,8 +5135,8 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 				}
 				ret = __setplane_internal_custom(plane, crtc, plane->state->fb, plane->state->crtc_x, plane->state->crtc_y,
 												 plane->state->crtc_w, plane->state->crtc_h,
-												 scale_param->src_x, scale_param->src_y,
-												 scale_param->src_w << 16, scale_param->src_h << 16);
+												 scale_param_ip->src_x << 16, scale_param_ip->src_y << 16,
+												 scale_param_ip->src_w << 16, scale_param_ip->src_h << 16);
 			}
 			break;
 
@@ -5142,16 +5173,40 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 				DRM_DEBUG_KMS("\n Src width or height of dst is 0");
 			}
 			/* src_{x,y,w,h} values are stored as 16.16 fixed point */
-			DRM_DEBUG_KMS("src rect: %d %d %d %d", plane->state->src_x, plane->state->src_y,
+			DRM_DEBUG_KMS("src rect: %d %d %d %d", plane->state->src_x >> 16, plane->state->src_y >> 16,
 				   plane->state->src_w >> 16, plane->state->src_h >> 16);
 			DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
 				   plane->state->crtc_w, plane->state->crtc_h);
-			ret = __setplane_internal_custom(plane, crtc, plane->state->fb,
+			ret = __setplane_internal_custom(plane, crtc, fb,
 									  plane->state->crtc_x, plane->state->crtc_y,
 									  plane->state->crtc_w, plane->state->crtc_h,
 									  plane->state->src_x, plane->state->src_y,
 									  plane->state->src_w, plane->state->src_h);
 			break;
+		case 0xff05:
+			memcpy((void *)&scale_param_fb, (void *)arg->value, sizeof(scale_param_fb));
+			DRM_DEBUG_KMS("src rect: %d %d %d %d fb_id = %d", scale_param_fb.src_x, scale_param_fb.src_y,
+						  scale_param_fb.src_w, scale_param_fb.src_h, scale_param_fb.fb_id);
+
+			fbs = drm_framebuffer_lookup(plane->dev, scale_param_fb.fb_id);
+			if (!fbs) {
+				DRM_DEBUG_KMS("\n Unknown framebuffer ID %d ", arg->value);
+				return -ENOENT;
+			} else {
+				DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
+					   plane->state->crtc_w, plane->state->crtc_h);
+
+				if (plane->state->crtc_w == 0 || plane->state->crtc_h == 0) {
+					DRM_DEBUG_KMS("\n Invalid values, Dst rect width or height or both zeros");
+					return -ENOENT;
+				}
+				ret = __setplane_internal_custom(plane, crtc, fbs, plane->state->crtc_x, plane->state->crtc_y,
+												 plane->state->crtc_w, plane->state->crtc_h,
+												 plane->state->src_x, plane->state->src_y,
+												 scale_param_fb.src_w << 16, scale_param_fb.src_h << 16);
+				framearrived = true;
+			}
+			break;
 		default:
 			DRM_DEBUG_KMS("\n prop ID %d ", arg->prop_id);
 			return -ENOENT;
-- 
1.9.1

