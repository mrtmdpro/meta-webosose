From 27565b7bcb936e151a5176d00b93b18d916e02a2 Mon Sep 17 00:00:00 2001
From: Purushottam Narayana <purushottam.narayana@lge.com>
Date: Thu, 16 Nov 2017 13:30:35 -0800
Subject: [PATCH] Fix scaling and fb association on a plane asynchronously

:Release Notes:

:Detailed Notes:
- Scaling and FB can happen any time from 2 different application processes,
BRCM driver expects FB to be associated first, followed by scaling. This change
along with previous changes completes scaling and fb association to work asychronously.
- Also add cushon to handle display width/height div 0 exception for GFX.

:Testing Performed:
Can play video repeatedly with reference media player.

:QA Notes:

:Issues Addressed:
[PLAT-47721] Fix scaling and fb association on a plane asynchronously
---
 drivers/gpu/drm/drm_plane.c | 47 ++++++++++++++++++++++++++++++++-------------
 1 file changed, 34 insertions(+), 13 deletions(-)

diff --git a/drivers/gpu/drm/drm_plane.c b/drivers/gpu/drm/drm_plane.c
index e274559..fd04078 100644
--- a/drivers/gpu/drm/drm_plane.c
+++ b/drivers/gpu/drm/drm_plane.c
@@ -496,6 +496,14 @@ static int __setplane_internal(struct drm_plane *plane,
 		goto out;
 	}
 
+	/* BRCM RPI drivers gives div 0 exception when display width/height being 0 */
+	if (!(crtc_w & crtc_h)) {
+		DRM_DEBUG_KMS("Invalid CRTC coordinates %ux%u+%d+%d\n",
+			      crtc_w, crtc_h, crtc_x, crtc_y);
+		ret = -ERANGE;
+		goto out;
+	}
+
 	ret = drm_framebuffer_check_src_coords(src_x, src_y, src_w, src_h, fb);
 	if (ret)
 		goto out;
@@ -533,6 +541,7 @@ static int __setplane_internal_custom(struct drm_plane *plane,
 	int ret = 0;
 	/* No fb means shut it down */
 	if (!fb) {
+		plane->funcs->disable_plane(plane);
 		plane->fb = NULL;
 		goto out;
 	}
@@ -665,9 +674,10 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 				   scale_param->src_w>>16, scale_param->src_h>>16);
 			DRM_DEBUG_KMS("crtc rect: %d %d %d %d", scale_param->crtc_x, scale_param->crtc_y,
 				   scale_param->crtc_w, scale_param->crtc_h);
-			if (!scale_param || (scale_param->crtc_x == 0 && scale_param->crtc_y == 0
-								 && scale_param->crtc_w == 0 && scale_param->crtc_h == 0)) {
-				DRM_DEBUG_KMS("\n Invalid values, Dst rect is all zero");
+
+			/* BRCM RPI drivers gives div 0 exception when display width/height being 0 */
+			if (!scale_param || !(scale_param->crtc_w & scale_param->crtc_h)) {
+				DRM_DEBUG_KMS("\n Invalid values, Dst rect width or height or both zeros");
 				return -ENOENT;
 			}
 
@@ -701,24 +711,35 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 					DRM_DEBUG_KMS("\n Unknown framebuffer ID %d ", arg->value);
 					return -ENOENT;
 				}
+				if (!crtc) {
+					DRM_DEBUG_KMS("\n drm crtc find called");
+					crtc = drm_crtc_find(dev, crtc_id);
+					if (!crtc) DRM_DEBUG_KMS("\n drm crtc find called and returned NULL");
+				}
 			} else {
-				fb = 0;
-			}
-			if (!crtc) {
-				crtc = drm_crtc_find(dev, crtc_id);
+				/* If plane is valid we can still handle fb = 0, if both fb and plane is notavailable
+				 then application has not initialized driver */
+				if (crtc)
+					fb = 0;
+				else
+					return -ENOENT;
 			}
-			DRM_DEBUG_KMS("src rect: %d %d %d %d", plane->state->src_x, plane->state->src_y,
-				   plane->state->src_w, plane->state->src_h);
-			DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
-				   plane->state->crtc_w, plane->state->crtc_h);
 			if (!(plane->state->crtc_w & plane->state->crtc_h)) {
 				plane->state->crtc_w = fb->width;
 				plane->state->crtc_h = fb->height;
+				DRM_DEBUG_KMS("\n Dst width or height of dst is 0");
 			}
 			if (!(plane->state->src_w & plane->state->src_h)) {
-				plane->state->src_w = fb->width;
-				plane->state->src_h = fb->height;
+				/* src_{x,y,w,h} values are 16.16 fixed point */
+				plane->state->src_w = fb->width << 16;
+				plane->state->src_h = fb->height << 16;
+				DRM_DEBUG_KMS("\n Src width or height of dst is 0");
 			}
+			/* src_{x,y,w,h} values are stored as 16.16 fixed point */
+			DRM_DEBUG_KMS("src rect: %d %d %d %d", plane->state->src_x, plane->state->src_y,
+				   plane->state->src_w >> 16, plane->state->src_h >> 16);
+			DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
+				   plane->state->crtc_w, plane->state->crtc_h);
 			ret = __setplane_internal_custom(plane, crtc, fb,
 									  plane->state->crtc_x, plane->state->crtc_y,
 									  plane->state->crtc_w, plane->state->crtc_h,
-- 
1.9.1

