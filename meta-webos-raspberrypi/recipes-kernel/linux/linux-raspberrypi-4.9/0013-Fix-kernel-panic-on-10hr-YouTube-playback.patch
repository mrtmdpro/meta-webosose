From ccfcc3b2d61d052e3324f9bae11b8226487904db Mon Sep 17 00:00:00 2001
From: Purushottam Narayana <purushottam.narayana@lge.com>
Date: Mon, 19 Mar 2018 14:21:27 -0700
Subject: [PATCH] Fix kernel panic on ~10hr YouTube playback.

:Release Notes:
Fix kernel panic on ~10hr YouTube playback.

:Detailed Notes:
In kernel DRM driver FB refcount is decremented by one after any
operation like scaling, attach framebuffer is performed.
So it expects before doing any operation FB count is incremented.
If FB count goes below zero, it automatically releases the ptr and
when someone refers to it, results in kernel crash.

:Testing Performed:
Play YouTube for 10 hours.
Perform resolution change, switch videos and adaptive streaming.

:QA Notes:

:Issues Addressed:
[PLAT-52027] Kernel panic occured when continuously play youtube
             contents
---
 drivers/gpu/drm/drm_plane.c | 130 +++++++++++++++++++-------------------------
 1 file changed, 57 insertions(+), 73 deletions(-)

diff --git a/drivers/gpu/drm/drm_plane.c b/drivers/gpu/drm/drm_plane.c
index 9026dad..1de0554 100644
--- a/drivers/gpu/drm/drm_plane.c
+++ b/drivers/gpu/drm/drm_plane.c
@@ -536,9 +536,15 @@ static int __setplane_internal_custom(struct drm_plane *plane,
 			       int32_t crtc_x, int32_t crtc_y,
 			       uint32_t crtc_w, uint32_t crtc_h,
 			       uint32_t src_x, uint32_t src_y,
-			       uint32_t src_w, uint32_t src_h)
+									  uint32_t src_w, uint32_t src_h, uint32_t prop_id)
 {
 	int ret = 0;
+
+	/* BRCM driver crashes if crtc width or height is 0 */
+	if (crtc_w == 0 || crtc_h == 0) {
+		return 0;
+	}
+
 	/* No fb means shut it down */
 	if (!fb) {
 		plane->old_fb = plane->fb;
@@ -582,7 +588,7 @@ static int __setplane_internal_custom(struct drm_plane *plane,
 	if (ret)
 		goto out;
 
-	plane->old_fb = plane->fb;
+	plane->old_fb = (prop_id == 0xff05)? plane->fb : NULL;
 	ret = plane->funcs->update_plane(plane, crtc, fb,
 					 crtc_x, crtc_y, crtc_w, crtc_h,
 					 src_x, src_y, src_w, src_h);
@@ -613,7 +619,6 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 	struct drm_framebuffer *fb = plane->state->fb;
 	struct drm_mode_obj_set_property *arg = ar;
 	struct drm_plane_state state[4];
-	uint64_t mask = ~(~0 << 16);
 	int i = 0, j = 0;
 	/* TODO: Find a better place to associate webOS specific limits with
 	   Driver/platform specific code */
@@ -621,7 +626,6 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 	uint8_t max_planes = 4;
 	uint32_t crtc_id = 43;
 	uint16_t planeBase = 44;// Only single crtc is supported now.
-	bool framearrived = false;
 	struct drm_framebuffer *fbs = NULL;
 	struct io_rect {
 		/* Signed dest location allows it to be partially off screen */
@@ -640,7 +644,7 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 	};
 	struct io_rect scale_param;
 	struct ifb_rect scale_param_fb;
-	struct io_rect *scale_param_ip;
+	struct io_rect scale_param_ip;
 
 	DRM_DEBUG_KMS("drm_mode_plane_set_custom_prop arg->value = %llx arg->prop_id = %x plane_id = %d \n",arg->value, arg->prop_id, arg->obj_id);
 
@@ -669,7 +673,7 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 															  state[j].crtc_x, state[j].crtc_y,
 															  state[j].crtc_w, state[j].crtc_h,
 															  state[j].src_x, state[j].src_y,
-															  state[j].src_w, state[j].src_h);
+															  state[j].src_w, state[j].src_h, arg->prop_id);
 							break;
 						}
 					}
@@ -686,34 +690,18 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 												 state[i].crtc_x, state[i].crtc_y,
 												 state[i].crtc_w, state[i].crtc_h,
 												 state[i].src_x, state[i].src_y,
-												 state[i].src_w, state[i].src_h);
+												 state[i].src_w, state[i].src_h, arg->prop_id);
 			}
 			return ret;
 		case 0xff03:
 			memcpy((void *)&scale_param, (struct io_rect *)arg->value, sizeof(scale_param));
-			printk("ff03 src rect: %d %d %d %d \n", scale_param.src_x, scale_param.src_y,
+			DRM_DEBUG_KMS("ff03 src rect: %d %d %d %d \n", scale_param.src_x, scale_param.src_y,
 				   scale_param.src_w, scale_param.src_h);
 			DRM_DEBUG_KMS("ff03 crtc rect: %d %d %d %d \n", scale_param.crtc_x, scale_param.crtc_y,
 				   scale_param.crtc_w, scale_param.crtc_h);
 
-			/* BRCM RPI drivers gives div 0 exception when display width/height being 0 */
-			/* Scale param check is not required anymore as stack address passing is rectified in
-			 upper layer */
-			if (scale_param.crtc_w == 0 || scale_param.crtc_h == 0) {
-				DRM_DEBUG_KMS("\n Invalid values, Dst rect width or height or both zeros");
-				return -ENOENT;
-			}
-
-			if (plane->state->crtc_x == scale_param.crtc_x && plane->state->crtc_y == scale_param.crtc_y &&
-				plane->state->crtc_w == scale_param.crtc_w && plane->state->crtc_h == scale_param.crtc_h &&
-				plane->state->src_x == (scale_param.src_x << 16) && plane->state->src_y == (scale_param.src_y << 16) &&
-				plane->state->src_w == (scale_param.src_w << 16) && plane->state->src_h == (scale_param.src_h << 16)) {
-				DRM_DEBUG_KMS("ff03 No change in values");
-				return 0;
-			}
-
-			if (!plane->state->fb || (!scale_param.crtc_x && !scale_param.crtc_y && !framearrived)) {
-				DRM_DEBUG_KMS("\n No FB connected yet, store the values");
+			if (!plane->state->fb) {
+				DRM_DEBUG_KMS("\n FB is not attached yet hence store the values");
 				plane->state->crtc_x = scale_param.crtc_x;
 				plane->state->crtc_y = scale_param.crtc_y;
 				plane->state->crtc_w = scale_param.crtc_w;
@@ -723,41 +711,40 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 				plane->state->src_y = scale_param.src_y << 16;
 				plane->state->src_w = scale_param.src_w << 16;
 				plane->state->src_h = scale_param.src_h << 16;
-				framearrived = false;
-				ret = 0;
-			} else {
-				DRM_DEBUG_KMS("Call __setplane_internal_custom");
+				return 0;
+			}
+
+			if (plane->state->crtc_x == scale_param.crtc_x && plane->state->crtc_y == scale_param.crtc_y &&
+				plane->state->crtc_w == scale_param.crtc_w && plane->state->crtc_h == scale_param.crtc_h) {
+				DRM_DEBUG_KMS("ff03 No change in values");
+				DRM_DEBUG_KMS("ff03 done");
+				return 0;
+			}
+
+			if (((scale_param.src_x != 0) || (scale_param.src_y != 0))  ||
+				(scale_param.crtc_x != plane->state->crtc_x) || (scale_param.crtc_y != plane->state->crtc_y)
+				|| (scale_param.crtc_w != plane->state->crtc_w)) {
 				ret = __setplane_internal_custom(plane, crtc, plane->state->fb, scale_param.crtc_x, scale_param.crtc_y,
 												 scale_param.crtc_w, scale_param.crtc_h,
-												 scale_param.src_x << 16, scale_param.src_y << 16,
-												 scale_param.src_w << 16, scale_param.src_h << 16);
+												 scale_param.src_x<<16, scale_param.src_y<<16,
+												 scale_param.src_w<<16, scale_param.src_h<<16, arg->prop_id);
+			} else {
+				DRM_DEBUG_KMS("No scaling required");
 			}
+			DRM_DEBUG_KMS("ff03 done");
 			break;
 		case 0xff04:
-			scale_param_ip = (struct io_rect *) arg->value;
-			DRM_DEBUG_KMS("src rect: %d %d %d %d \n", scale_param_ip->src_x, scale_param_ip->src_y,
-				   scale_param_ip->src_w, scale_param_ip->src_h);
-
-			if (!plane->state->fb) {
-				DRM_DEBUG_KMS("\n No FB connected yet, store the values");
-				plane->state->src_x = scale_param_ip->src_x << 16;
-				plane->state->src_y = scale_param_ip->src_y << 16;
-				plane->state->src_w = scale_param_ip->src_w << 16;
-				plane->state->src_h = scale_param_ip->src_h << 16;
-				ret = 0;
-			} else {
-				DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
-					   plane->state->crtc_w, plane->state->crtc_h);
+			memcpy((void *)&scale_param_ip, (struct io_rect *)arg->value, sizeof(scale_param_ip));
+			DRM_DEBUG_KMS("ff04 src rect: %d %d %d %d \n", scale_param_ip.src_x, scale_param_ip.src_y,
+				   scale_param_ip.src_w, scale_param_ip.src_h);
+			DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
+				   plane->state->crtc_w, plane->state->crtc_h);
 
-				if (plane->state->crtc_w == 0 || plane->state->crtc_h == 0) {
-					DRM_DEBUG_KMS("\n Invalid values, Dst rect width or height or both zeros");
-					return -ENOENT;
-				}
-				ret = __setplane_internal_custom(plane, crtc, plane->state->fb, plane->state->crtc_x, plane->state->crtc_y,
-												 plane->state->crtc_w, plane->state->crtc_h,
-												 scale_param_ip->src_x << 16, scale_param_ip->src_y << 16,
-												 scale_param_ip->src_w << 16, scale_param_ip->src_h << 16);
-			}
+			ret = __setplane_internal_custom(plane, crtc, fbs, plane->state->crtc_x, plane->state->crtc_y,
+											 plane->state->crtc_w, plane->state->crtc_h,
+											 plane->state->src_x, plane->state->src_y,
+											 scale_param_ip.src_w << 16, scale_param_ip.src_h << 16, arg->prop_id);
+			DRM_DEBUG_KMS("ff04 done");
 			break;
 
 		case 0xff01:
@@ -801,31 +788,28 @@ int drm_mode_plane_set_custom_prop(struct drm_device *dev, struct drm_plane *pla
 									  plane->state->crtc_x, plane->state->crtc_y,
 									  plane->state->crtc_w, plane->state->crtc_h,
 									  plane->state->src_x, plane->state->src_y,
-									  plane->state->src_w, plane->state->src_h);
+											 plane->state->src_w, plane->state->src_h, arg->prop_id);
 			break;
 		case 0xff05:
 			memcpy((void *)&scale_param_fb, (void *)arg->value, sizeof(scale_param_fb));
-			DRM_DEBUG_KMS("src rect: %d %d %d %d fb_id = %d", scale_param_fb.src_x, scale_param_fb.src_y,
+			DRM_DEBUG_KMS("ff05 src rect: %d %d %d %d fb_id = %d", scale_param_fb.src_x, scale_param_fb.src_y,
 						  scale_param_fb.src_w, scale_param_fb.src_h, scale_param_fb.fb_id);
-
-			fbs = drm_framebuffer_lookup(plane->dev, scale_param_fb.fb_id);
-			if (!fbs) {
-				DRM_DEBUG_KMS("\n Unknown framebuffer ID %d ", arg->value);
-				return -ENOENT;
-			} else {
-				DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
-					   plane->state->crtc_w, plane->state->crtc_h);
-
-				if (plane->state->crtc_w == 0 || plane->state->crtc_h == 0) {
-					DRM_DEBUG_KMS("\n Invalid values, Dst rect width or height or both zeros");
+			if (scale_param_fb.fb_id > 0) {
+				fbs = drm_framebuffer_lookup(plane->dev, scale_param_fb.fb_id);
+				if (!fbs) {
+					DRM_DEBUG_KMS("\n Unknown framebuffer ID %d ", arg->value);
 					return -ENOENT;
+				} else {
+					DRM_DEBUG_KMS("crtc rect: %d %d %d %d", plane->state->crtc_x, plane->state->crtc_y,
+						   plane->state->crtc_w, plane->state->crtc_h);
+
+					ret = __setplane_internal_custom(plane, crtc, fbs, plane->state->crtc_x, plane->state->crtc_y,
+													 plane->state->crtc_w, plane->state->crtc_h,
+													 plane->state->src_x, plane->state->src_y,
+													 scale_param_fb.src_w << 16, scale_param_fb.src_h << 16, arg->prop_id);
 				}
-				ret = __setplane_internal_custom(plane, crtc, fbs, plane->state->crtc_x, plane->state->crtc_y,
-												 plane->state->crtc_w, plane->state->crtc_h,
-												 plane->state->src_x, plane->state->src_y,
-												 scale_param_fb.src_w << 16, scale_param_fb.src_h << 16);
-				framearrived = true;
 			}
+			DRM_DEBUG_KMS("ff05 done");
 			break;
 		default:
 			DRM_DEBUG_KMS("\n prop ID %d ", arg->prop_id);
-- 
1.9.1

