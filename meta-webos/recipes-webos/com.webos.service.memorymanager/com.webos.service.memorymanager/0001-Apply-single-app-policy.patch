From 1432b738e165cbc5ced8499d18e5068bf0a56f0d Mon Sep 17 00:00:00 2001
From: Sangwoo Kang <sangwoo82.kang@lge.com>
Date: Mon, 23 Dec 2019 16:14:14 +0900
Subject: [PATCH] Apply 'single app policy'

:Release Notes:
Apply 'single app policy'

:Detailed Notes:
Apply 'single app policy'

:Testing Performed:
Unittest: Passed

:QA Notes:

:Issues Addressed:
[PLAT-92930]

Change-Id: Id9f8f9aa2e6e8f1855e5419be7b9328923932f05
---
 CMakeLists.txt                                | 10 ++++-
 src/Environment.h.in                          | 26 +++++++++++
 src/memorymanager/CMakeLists.txt              |  1 +
 src/memorymanager/MemoryManager.cpp           | 16 +++++--
 src/memorymanager/base/Application.cpp        |  1 +
 src/memorymanager/base/Application.h          | 10 +++--
 .../luna/client/ApplicationManager.cpp        |  1 -
 .../memoryinfo/MemoryInfoManager.cpp          | 15 ++++---
 src/memorymanager/setting/SettingManager.cpp  | 44 +++++++++++++------
 src/memorymanager/setting/SettingManager.h    | 13 +-----
 10 files changed, 96 insertions(+), 41 deletions(-)
 create mode 100644 src/Environment.h.in

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6cd05a0..bb489d5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-# Copyright (c) 2018 LG Electronics, Inc.
+# Copyright (c) 2018-2019 LG Electronics, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -19,9 +19,17 @@ cmake_minimum_required(VERSION 2.8.7)
 project(com.webos.service.memorymanager C CXX)
 
 include(webOS/webOS)
+
 webos_modules_init(1 1 1 QUALIFIER RC4)
 webos_component(1 0 0)
 
+webos_distro_dep()
+webos_distro_variant_dep()
+webos_machine_dep()
+webos_machine_impl_dep()
+
+webos_configure_source_files(cfg ${PROJECT_SOURCE_DIR}/src/Environment.h)
+
 add_subdirectory(src/memorymanager)
 add_subdirectory(src/memstay)
 
diff --git a/src/Environment.h.in b/src/Environment.h.in
new file mode 100644
index 0000000..7b48be3
--- /dev/null
+++ b/src/Environment.h.in
@@ -0,0 +1,26 @@
+// Copyright (c) 2019 LG Electronics, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// SPDX-License-Identifier: Apache-2.0
+
+#ifndef ENVIRONMENT_H_
+#define ENVIRONMENT_H_
+
+static const char* const WEBOS_TARGET_DISTRO         = "@WEBOS_TARGET_DISTRO@";
+static const char* const WEBOS_TARGET_DISTRO_VARIANT = "@WEBOS_TARGET_DISTRO_VARIANT@";
+static const char* const WEBOS_TARGET_MACHINE        = "@WEBOS_TARGET_MACHINE@";
+static const char* const WEBOS_TARGET_MACHINE_IMPL   = "@WEBOS_TARGET_MACHINE_IMPL@";
+static const char* const WEBOS_TARGET_SOC_FAMILY     = "@WEBOS_TARGET_SOC_FAMILY@";
+
+#endif  // ENVIRONMENT_H_
diff --git a/src/memorymanager/CMakeLists.txt b/src/memorymanager/CMakeLists.txt
index 401bc3f..e107eb8 100644
--- a/src/memorymanager/CMakeLists.txt
+++ b/src/memorymanager/CMakeLists.txt
@@ -51,6 +51,7 @@ file(GLOB_RECURSE SRC_MEMORYMANAGER ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
 
 # Compile
 webos_add_compiler_flags(ALL CXX -std=c++0x)
+include_directories(${PROJECT_BINARY_DIR}/Configured/src)
 include_directories(${CMAKE_CURRENT_SOURCE_DIR})
 include_directories(${PROJECT_SOURCE_DIR}/src/common)
 add_executable(${BIN_NAME} ${SRC_COMMON} ${SRC_MEMORYMANAGER})
diff --git a/src/memorymanager/MemoryManager.cpp b/src/memorymanager/MemoryManager.cpp
index 563a13d..96872e5 100644
--- a/src/memorymanager/MemoryManager.cpp
+++ b/src/memorymanager/MemoryManager.cpp
@@ -58,17 +58,25 @@ void MemoryManager::onTick()
 
 bool MemoryManager::onRequireMemory(int requiredMemory, string& errorText)
 {
+    if (SettingManager::getInstance().isSingleAppPolicy()) {
+        Logger::normal("SingleApp Policy. Skipping memory level check", LOG_NAME);
+        return true;
+    }
+
     for (int i = 0; i < SettingManager::getInstance().getRetryCount(); ++i) {
+        if (MemoryInfoManager::getInstance().getExpectedLevel(requiredMemory) != MemoryLevel_CRITICAL) {
+            return true;
+        }
+
         if (ApplicationManager::getInstance().getRunningAppCount() == 0) {
             errorText = "Failed to reclaim required memory. All apps were closed";
+            // TODO This should be reboot?
             return false;
         }
 
-        if (MemoryInfoManager::getInstance().getExpectedLevel(requiredMemory) != MemoryLevel_CRITICAL) {
-            return true;
-        }
-
         ApplicationManager::getInstance().closeApp(true);
+
+        // TODO Need to find better way to check memory level again.
         MemoryInfoManager::getInstance().update();
     }
     errorText = "Failed to reclaim required memory. Timeout.";
diff --git a/src/memorymanager/base/Application.cpp b/src/memorymanager/base/Application.cpp
index 2edc6bb..8226ee0 100644
--- a/src/memorymanager/base/Application.cpp
+++ b/src/memorymanager/base/Application.cpp
@@ -22,6 +22,7 @@ Application::Application()
     : m_appId(""),
       m_type(""),
       m_status(""),
+      m_displayId(0),
       m_pid(0),
       m_time(0),
       m_context(0)
diff --git a/src/memorymanager/base/Application.h b/src/memorymanager/base/Application.h
index a137d40..8c0dba1 100644
--- a/src/memorymanager/base/Application.h
+++ b/src/memorymanager/base/Application.h
@@ -36,14 +36,16 @@ public:
             return 0;
         else if (status == "close")
             return 1;
-        else if (status == "foreground")
+        else if (status == "launch")
             return 2;
-        else if (status == "background")
+        else if (status == "foreground")
             return 3;
-        else if (status == "preload")
+        else if (status == "background")
             return 4;
-        else
+        else if (status == "preload")
             return 5;
+        else
+            return 6;
     }
 
     static int getTypePriority(const string& type)
diff --git a/src/memorymanager/luna/client/ApplicationManager.cpp b/src/memorymanager/luna/client/ApplicationManager.cpp
index e8be69c..341c1d0 100644
--- a/src/memorymanager/luna/client/ApplicationManager.cpp
+++ b/src/memorymanager/luna/client/ApplicationManager.cpp
@@ -86,7 +86,6 @@ bool ApplicationManager::_running(LSHandle *sh, LSMessage *reply, void *ctx)
             application.setType(appType);
         if (JValueUtil::getValue(item, "displayId", displayId))
             application.setDisplayId(displayId);
-        cout << "1111 - " << application.getDisplayId() << endl;
         if (JValueUtil::getValue(item, "processid", processid) && !processid.empty())
             application.setPid(std::stoi(processid));
 
diff --git a/src/memorymanager/memoryinfo/MemoryInfoManager.cpp b/src/memorymanager/memoryinfo/MemoryInfoManager.cpp
index c81f717..4c2df4b 100644
--- a/src/memorymanager/memoryinfo/MemoryInfoManager.cpp
+++ b/src/memorymanager/memoryinfo/MemoryInfoManager.cpp
@@ -112,16 +112,21 @@ enum MemoryLevel MemoryInfoManager::getCurrentLevel()
     return m_level;
 }
 
-enum MemoryLevel MemoryInfoManager::getExpectedLevel(int memory)
+enum MemoryLevel MemoryInfoManager::getExpectedLevel(int requiredMemory)
 {
-    long expectedAvailable = m_free - memory;
+    static char buffer[256];
+    long expectedAvailable = m_free - requiredMemory;
 
-    if (expectedAvailable < SettingManager::getInstance().getCriticalEnter())
+    sprintf(buffer, "Free(%d) - RequiredMemory(%d) = ExpectedMemory(%d)", m_free, requiredMemory, expectedAvailable);
+    Logger::normal(buffer, LOG_NAME);
+
+    if (expectedAvailable < SettingManager::getInstance().getCriticalEnter()) {
         return MemoryLevel_CRITICAL;
-    else if (m_free < SettingManager::getInstance().getLowEnter())
+    } else if (m_free < SettingManager::getInstance().getLowEnter()) {
         return MemoryLevel_LOW;
-    else
+    } else {
         return MemoryLevel_NORMAL;
+    }
 }
 
 void MemoryInfoManager::print()
diff --git a/src/memorymanager/setting/SettingManager.cpp b/src/memorymanager/setting/SettingManager.cpp
index c7a00b8..c540656 100644
--- a/src/memorymanager/setting/SettingManager.cpp
+++ b/src/memorymanager/setting/SettingManager.cpp
@@ -18,13 +18,9 @@
 
 #include <unistd.h>
 
-const char *SettingManager::PATH_DEVMODE_ENABLED = "/var/luna/preferences/devmode_enabled";
+#include "Environment.h"
 
 SettingManager::SettingManager()
-    : m_lowEnter(DEFAULT_LOW_ENTER)
-    , m_lowExit(DEFAULT_LOW_EXIT)
-    , m_criticalEnter(DEFAULT_CRITICAL_ENTER)
-    , m_criticalExit(DEFAULT_CRITICAL_EXIT)
 {
 }
 
@@ -39,22 +35,40 @@ void SettingManager::initialize(GMainLoop* mainloop)
 
 int SettingManager::getLowEnter()
 {
-    return m_lowEnter;
+    if (strcmp(WEBOS_TARGET_DISTRO, "webos") == 0) {
+        return 250;
+    } else {
+        return 100;
+    }
 }
 
 int SettingManager::getLowExit()
 {
-    return m_lowExit;
+    if (strcmp(WEBOS_TARGET_DISTRO, "webos") == 0) {
+        return 280;
+    } else {
+        return 120;
+
+    }
 }
 
 int SettingManager::getCriticalEnter()
 {
-    return m_criticalEnter;
+    if (strcmp(WEBOS_TARGET_DISTRO, "webos") == 0) {
+        return 100;
+    } else {
+        return 50;
+
+    }
 }
 
 int SettingManager::getCriticalExit()
 {
-    return m_criticalExit;
+    if (strcmp(WEBOS_TARGET_DISTRO, "webos") == 0) {
+        return 130;
+    } else {
+        return 70;
+    }
 }
 
 int SettingManager::getDefaultRequiredMemory()
@@ -67,15 +81,17 @@ int SettingManager::getRetryCount()
     return DEFAULT_RETRY_COUNT;
 }
 
-bool SettingManager::isDevmode()
+bool SettingManager::isVerbose()
 {
-    if (access(PATH_DEVMODE_ENABLED, F_OK) == 0)
-        return true;
-    return false;
+    return true;
 }
 
-bool SettingManager::isVerbose()
+bool SettingManager::isSingleAppPolicy()
 {
+    if (strcmp(WEBOS_TARGET_DISTRO, "webos") == 0 ||
+        strcmp(WEBOS_TARGET_DISTRO, "webos-auto") == 0) {
+        return false;
+    }
     return true;
 }
 
diff --git a/src/memorymanager/setting/SettingManager.h b/src/memorymanager/setting/SettingManager.h
index 034b0e4..a8c3afc 100644
--- a/src/memorymanager/setting/SettingManager.h
+++ b/src/memorymanager/setting/SettingManager.h
@@ -52,26 +52,15 @@ public:
     int getDefaultRequiredMemory();
     int getRetryCount();
 
-    bool isDevmode();
     bool isVerbose();
+    bool isSingleAppPolicy();
 
 private:
-    static const int DEFAULT_LOW_EXIT = 280;
-    static const int DEFAULT_LOW_ENTER = 250;
-    static const int DEFAULT_CRITICAL_EXIT = 130;
-    static const int DEFAULT_CRITICAL_ENTER = 100;
-
     static const int DEFAULT_RETRY_COUNT = 5;
     static const int DEFAULT_REQUIRED_MEMORY = 120;
 
-    static const char *PATH_DEVMODE_ENABLED;
-
     SettingManager();
 
-    int m_lowEnter;
-    int m_lowExit;
-    int m_criticalEnter;
-    int m_criticalExit;
 };
 
 #endif /* SETTING_SETTINGMANAGER_H_ */
-- 
2.17.1

