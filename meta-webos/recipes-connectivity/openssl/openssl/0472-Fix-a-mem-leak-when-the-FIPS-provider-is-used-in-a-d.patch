From 9b4c2d160ee6a5a778c7703c0021576a9d6f9f99 Mon Sep 17 00:00:00 2001
From: "woojoong.kim" <woojoong.kim@lge.com>
Date: Thu, 23 May 2024 10:53:23 +0900
Subject: [PATCH] Fix a mem leak when the FIPS provider is used in a different
 thread

We were neglecting to register the main thread to receive thread stop
notifications. This is important if the thread that starts the FIPS
provider is not the same one that is used when OPENSSL_cleanup() is
called.

migrate from master branch: be203ea3d3a60a881993d1f7552084996d34ba0a

---
Upstream-Status: Backport [openssl-3.2.0-alpha2 be203ea3d3a60a881993d1f7552084996d34ba0a]

 crypto/initthread.c       | 21 +++++++++++++++++++--
 include/crypto/cryptlib.h |  1 +
 providers/fips/fipsprov.c |  9 +++++++++
 3 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/crypto/initthread.c b/crypto/initthread.c
index 1bdaeda9fc..97ca1e2894 100644
--- a/crypto/initthread.c
+++ b/crypto/initthread.c
@@ -248,6 +248,15 @@ void ossl_ctx_thread_stop(OSSL_LIB_CTX *ctx)
 
 #else
 
+static void ossl_arg_thread_stop(void *arg);
+
+/* Register the current thread so that we are informed if it gets stopped */
+int ossl_thread_register_fips(OSSL_LIB_CTX *libctx)
+{
+    return c_thread_start(FIPS_get_core_handle(libctx), ossl_arg_thread_stop,
+                          libctx);
+}
+
 static void *thread_event_ossl_ctx_new(OSSL_LIB_CTX *libctx)
 {
     THREAD_EVENT_HANDLER **hands = NULL;
@@ -266,6 +275,15 @@ static void *thread_event_ossl_ctx_new(OSSL_LIB_CTX *libctx)
 
     if (!CRYPTO_THREAD_set_local(tlocal, hands))
         goto err;
+    /*
+     * We should ideally call ossl_thread_register_fips() here. This function
+     * is called during the startup of the FIPS provider and we need to ensure
+     * that the main thread is registered to receive thread callbacks in order
+     * to free |hands| that we allocated above. However we are too early in
+     * the FIPS provider initialisation that FIPS_get_core_handle() doesn't work
+     * yet. So we defer this to the main provider OSSL_provider_init_int()
+     * function.
+     */
 
     return tlocal;
  err:
@@ -386,8 +404,7 @@ int ossl_init_thread_start(const void *index, void *arg,
          * libcrypto to tell us about later thread stop events. c_thread_start
          * is a callback to libcrypto defined in fipsprov.c
          */
-        if (!c_thread_start(FIPS_get_core_handle(ctx), ossl_arg_thread_stop,
-                            ctx))
+        if (!ossl_thread_register_fips(ctx))
             return 0;
     }
 #endif
diff --git a/include/crypto/cryptlib.h b/include/crypto/cryptlib.h
index 39a956bfd3..9fdfee7189 100644
--- a/include/crypto/cryptlib.h
+++ b/include/crypto/cryptlib.h
@@ -22,6 +22,7 @@ int ossl_init_thread_deregister(void *index);
 int ossl_init_thread(void);
 void ossl_cleanup_thread(void);
 void ossl_ctx_thread_stop(OSSL_LIB_CTX *ctx);
+int ossl_thread_register_fips(OSSL_LIB_CTX *);
 
 /*
  * OPENSSL_INIT flags. The primary list of these is in crypto.h. Flags below
diff --git a/providers/fips/fipsprov.c b/providers/fips/fipsprov.c
index 6a88039423..d96a790b61 100644
--- a/providers/fips/fipsprov.c
+++ b/providers/fips/fipsprov.c
@@ -673,6 +673,15 @@ int OSSL_provider_init_int(const OSSL_CORE_HANDLE *handle,
 
     fgbl->handle = handle;
 
+    /*
+     * We need to register this thread to receive thread lifecycle callbacks.
+     * This wouldn't matter if the current thread is also the same thread that
+     * closes the FIPS provider down. But if that happens on a different thread
+     * then memory leaks could otherwise occur.
+     */
+    if (!ossl_thread_register_fips(libctx))
+        goto err;
+
     /*
      * We did initial set up of selftest_params in a local copy, because we
      * could not create fgbl until c_CRYPTO_zalloc was defined in the loop

