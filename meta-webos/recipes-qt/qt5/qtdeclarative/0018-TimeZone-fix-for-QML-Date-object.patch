From 08c0222443146ac51c2db0fa94dc6308cddc7540 Mon Sep 17 00:00:00 2001
From: Valery Volgutov <valery.volgutov@lge.com>
Date: Wed, 1 Nov 2017 14:37:08 +0300
Subject: [PATCH] TimeZone fix for QML Date object

:Release Notes:
TimeZone fix for QML Date object

:Detailed Notes:
When we try to set time to past we can have issue with incorrect
timezone calculation.
Timezone calculates for current time (returns "time" function).
But timezone may be differ for current and past time.
E.g. Turkey had GMT+2 and +1 daylight save in 2011 year, but
for 2017 - GMT + 3.

:Testing Performed:
M16p (build 1465).

:QA Notes:

:Issues Addressed:
[PLAT-47128] Incorrect time display in QML app

Upstream-Status: [Submitted]
https://codereview.qt-project.org/#/c/210830/

Change-Id: If0b068b23bc790a70842b4309170c03d06a9e1b3
---
 src/qml/jsruntime/qv4dateobject.cpp | 46 +++++++++++++++++++------------------
 1 file changed, 24 insertions(+), 22 deletions(-)

diff --git a/src/qml/jsruntime/qv4dateobject.cpp b/src/qml/jsruntime/qv4dateobject.cpp
index 36754a1..0f89fac 100644
--- a/src/qml/jsruntime/qv4dateobject.cpp
+++ b/src/qml/jsruntime/qv4dateobject.cpp
@@ -69,7 +69,27 @@ static const double msPerMinute = 60000.0;
 static const double msPerHour = 3600000.0;
 static const double msPerDay = 86400000.0;
 
-static double LocalTZA = 0.0; // initialized at startup
+static double getLocalTZA(double tt)
+{
+#ifndef Q_OS_WIN
+    struct tm t;
+    time_t curr;
+    tzset();
+    if (qIsNaN(tt))
+        time(&curr);
+    else
+        curr = (time_t)(tt / 1000.0);
+    gmtime_r(&curr, &t);
+    time_t globl = mktime(&t);
+    localtime_r(&curr, &t);
+    time_t locl = mktime(&t);
+    return double(locl - globl) * 1000.0;
+#else
+    TIME_ZONE_INFORMATION tzInfo;
+    GetTimeZoneInformation(&tzInfo);
+    return -tzInfo.Bias * 60.0 * 1000.0;
+#endif
+}
 
 static inline double TimeWithinDay(double t)
 {
@@ -303,11 +323,13 @@ static inline double DaylightSavingTA(double t)
 
 static inline double LocalTime(double t)
 {
+    double LocalTZA = getLocalTZA(t);
     return t + LocalTZA + DaylightSavingTA(t);
 }
 
 static inline double UTC(double t)
 {
+    double LocalTZA = getLocalTZA(t);
     return t - LocalTZA - DaylightSavingTA(t - LocalTZA);
 }
 
@@ -560,6 +582,7 @@ static inline QString ToString(double t)
     if (std::isnan(t))
         return QStringLiteral("Invalid Date");
     QString str = ToDateTime(t, Qt::LocalTime).toString() + QStringLiteral(" GMT");
+    double LocalTZA = getLocalTZA(t);
     double tzoffset = LocalTZA + DaylightSavingTA(t);
     if (tzoffset) {
         int hours = static_cast<int>(::fabs(tzoffset) / 1000 / 60 / 60);
@@ -607,25 +630,6 @@ static inline QString ToLocaleTimeString(double t)
     return ToDateTime(t, Qt::LocalTime).time().toString(Qt::LocaleDate);
 }
 
-static double getLocalTZA()
-{
-#ifndef Q_OS_WIN
-    struct tm t;
-    time_t curr;
-    tzset();
-    time(&curr);
-    gmtime_r(&curr, &t);
-    time_t globl = mktime(&t);
-    localtime_r(&curr, &t);
-    time_t locl = mktime(&t);
-    return double(locl - globl) * 1000.0;
-#else
-    TIME_ZONE_INFORMATION tzInfo;
-    GetTimeZoneInformation(&tzInfo);
-    return -tzInfo.Bias * 60.0 * 1000.0;
-#endif
-}
-
 DEFINE_OBJECT_VTABLE(DateObject);
 
 Heap::DateObject::DateObject(const QDateTime &date)
@@ -696,7 +700,6 @@ void DatePrototype::init(ExecutionEngine *engine, Object *ctor)
     ScopedObject o(scope);
     ctor->defineReadonlyProperty(engine->id_prototype(), (o = this));
     ctor->defineReadonlyProperty(engine->id_length(), Primitive::fromInt32(7));
-    LocalTZA = getLocalTZA();
 
     ctor->defineDefaultProperty(QStringLiteral("parse"), method_parse, 1);
     ctor->defineDefaultProperty(QStringLiteral("UTC"), method_UTC, 7);
@@ -1310,5 +1313,4 @@ ReturnedValue DatePrototype::method_toJSON(CallContext *ctx)
 
 void DatePrototype::timezoneUpdated()
 {
-    LocalTZA = getLocalTZA();
 }
