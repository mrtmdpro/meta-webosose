From 5c024facd860f773cddd84a9828b37f91ff8c467 Mon Sep 17 00:00:00 2001
From: Jaeyoon Jung <jaeyoon.jung@lge.com>
Date: Thu, 5 Jul 2018 16:10:46 +0900
Subject: [PATCH] eglfs: Associate keyboard device with window

:Release Notes:
Add an optional "keyboardDevice" field in QT_QPA_EGLFS_CONFIG and make
an association between the device and the window under the given output.

:Detailed Notes:
If QT_QPA_EGLFS_CONFIG specifies "keyboardDevice" for a certain output
then the keyboard handler for that device will have a reference to a
window which belongs to that output. Then all events handled there will
be delivered to that window directly.
It is assumed in this patch that a screen has only one window. If a
screen has multiple windows, then the latest window created or moved to
that screen will be used.
If a keyboard device is not associated with any output, then the handler
will have a null reference for the target window which results in events
to be delivered to the focused window.
This is not yet implemented for keyboard plugins other than Evdev.

:Testing Performed:
Confirmed keyboard events are delivered to the window associated.

:QA Notes:

:Issues Addressed:
[PLAT-61071] Improve the event handling flow for multi display
[PLAT-58591] Associate keyboard and display on static mode

Change-Id: I835721c5d482eaec7220aa435e2f00cdb04f2a68
---
 .../evdevkeyboard/qevdevkeyboardhandler.cpp   | 15 ++++++++++++--
 .../evdevkeyboard/qevdevkeyboardhandler_p.h   |  5 +++++
 .../evdevkeyboard/qevdevkeyboardmanager.cpp   | 11 ++++++++++
 .../evdevkeyboard/qevdevkeyboardmanager_p.h   |  3 +++
 .../eglfs/api/qeglfsdeviceintegration.cpp     |  6 ++++++
 .../eglfs/api/qeglfsdeviceintegration_p.h     |  2 ++
 .../platforms/eglfs/api/qeglfsintegration.cpp | 20 +++++++++++++++++++
 .../platforms/eglfs/api/qeglfsintegration_p.h |  4 ++++
 .../qeglfskmsintegration.cpp                  |  5 +++++
 .../eglfs_kms_support/qeglfskmsintegration.h  |  2 ++
 10 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler.cpp b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler.cpp
index a069a48388..bf75367816 100644
--- a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler.cpp
+++ b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler.cpp
@@ -77,7 +77,8 @@ QEvdevKeyboardHandler::QEvdevKeyboardHandler(const QString &device, QFdContainer
     : m_device(device), m_fd(fd.release()), m_notify(Q_NULLPTR),
       m_modifiers(0), m_composing(0), m_dead_unicode(0xffff),
       m_no_zap(disableZap), m_do_compose(enableCompose),
-      m_keymap(0), m_keymap_size(0), m_keycompose(0), m_keycompose_size(0)
+      m_keymap(0), m_keymap_size(0), m_keycompose(0), m_keycompose_size(0),
+      m_window(0)
 {
     qCDebug(qLcEvdevKey) << "Create keyboard handler with for device" << device;
 
@@ -227,7 +228,9 @@ void QEvdevKeyboardHandler::processKeyEvent(int nativecode, int unicode, int qtc
 {
     QGuiApplicationPrivate::inputDeviceManager()->setKeyboardModifiers(modifiers, qtcode);
 
-    QWindowSystemInterface::handleExtendedKeyEvent(0, (isPress ? QEvent::KeyPress : QEvent::KeyRelease),
+    if (m_window)
+        m_window->requestActivate();
+    QWindowSystemInterface::handleExtendedKeyEvent(m_window, (isPress ? QEvent::KeyPress : QEvent::KeyRelease),
                                                    qtcode, modifiers, nativecode + 8, 0, int(modifiers),
                                                    (unicode != 0xffff ) ? QString(unicode) : QString(), autoRepeat);
 }
@@ -569,4 +572,12 @@ bool QEvdevKeyboardHandler::loadKeymap(const QString &file)
     return true;
 }
 
+void QEvdevKeyboardHandler::setWindow(QWindow *window)
+{
+    if (m_window != window) {
+        qCDebug(qLcEvdevKey) << "keyboard device" << m_device << "is now associated with window" << window;
+        m_window = window;
+    }
+}
+
 QT_END_NAMESPACE
diff --git a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler_p.h b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler_p.h
index 1ec4915855..5b6def8aa1 100644
--- a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler_p.h
+++ b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler_p.h
@@ -54,6 +54,7 @@
 #include <qobject.h>
 #include <QTimer>
 #include <QDataStream>
+#include <QWindow>
 
 QT_BEGIN_NAMESPACE
 
@@ -190,6 +191,8 @@ public:
     bool loadKeymap(const QString &file);
     void unloadKeymap();
 
+    void setWindow(QWindow *window);
+
 private slots:
     void readKeycode();
     KeycodeAction processKeycode(quint16 keycode, bool pressed, bool autorepeat);
@@ -217,6 +220,8 @@ private:
     const QEvdevKeyboardMap::Composing *m_keycompose;
     int m_keycompose_size;
 
+    QWindow *m_window;
+
     static const QEvdevKeyboardMap::Mapping s_keymap_default[];
     static const QEvdevKeyboardMap::Composing s_keycompose_default[];
 };
diff --git a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager.cpp b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager.cpp
index 94ebae8f42..fbfea6ef13 100644
--- a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager.cpp
+++ b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager.cpp
@@ -151,4 +151,15 @@ void QEvdevKeyboardManager::loadKeymap(const QString &file)
     }
 }
 
+bool QEvdevKeyboardManager::setWindow(const QString &deviceNode, QWindow *window)
+{
+    if (m_keyboards.contains(deviceNode)) {
+        foreach (QEvdevKeyboardHandler *handler, m_keyboards.values(deviceNode))
+            handler->setWindow(window);
+        return true;
+    }
+
+    return false;
+}
+
 QT_END_NAMESPACE
diff --git a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager_p.h b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager_p.h
index d2e34fead3..84beee57e5 100644
--- a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager_p.h
+++ b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager_p.h
@@ -58,6 +58,7 @@
 #include <QObject>
 #include <QHash>
 #include <QSocketNotifier>
+#include <QWindow>
 
 QT_BEGIN_NAMESPACE
 
@@ -70,6 +71,8 @@ public:
 
     void loadKeymap(const QString &file);
 
+    bool setWindow(const QString &deviceNode, QWindow *window);
+
 private slots:
     void addKeyboard(const QString &deviceNode = QString());
     void removeKeyboard(const QString &deviceNode);
diff --git a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
index ffc11d51a4..0873205b4e 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
+++ b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
@@ -387,4 +387,10 @@ EGLConfig QEglFSDeviceIntegration::chooseConfig(EGLDisplay display, const QSurfa
     return chooser.chooseConfig();
 }
 
+QString QEGLDeviceIntegration::kbdDeviceName(QString &output) const
+{
+    Q_UNUSED(output);
+    return QString();
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
index 45da73d51b..644ee1f672 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
+++ b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
@@ -109,6 +109,8 @@ public:
 
     virtual void *wlDisplay() const;
 
+    virtual QString kbdDeviceName(QString &output) const;
+
     static EGLConfig chooseConfig(EGLDisplay display, const QSurfaceFormat &format);
     static EGLConfig chooseConfig(EGLDisplay display, const QSurfaceFormat &format, QEglFSDeviceIntegration *integration);
 };
diff --git a/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp b/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
index ac1d18bf93..5f1069307d 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
+++ b/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
@@ -290,6 +290,8 @@ QPlatformWindow *QEglFSIntegration::createPlatformWindow(QWindow *window) const
     // Activate only the window for the primary screen to make input work
     if (window->type() != Qt::ToolTip && window->screen() == QGuiApplication::primaryScreen())
         w->requestActivateWindow();
+    if (associateInputHandlers(window))
+        connect(window, SIGNAL(screenChanged(QScreen*)), this, SLOT(handleScreenChange()));
 
     return w;
 }
@@ -609,4 +611,22 @@ EGLNativeDisplayType QEglFSIntegration::nativeDisplay(QEglFSDeviceIntegration *i
     return integration->platformDisplay();
 }
 
+bool QEglFSIntegration::associateInputHandlers(QWindow *window) const
+{
+    bool associated = false;
+    if (window) {
+        QEglFSScreen *s = window->screen() ? static_cast<QEglFSScreen *>(window->screen()->handle()) : NULL;
+        QEglFSDeviceIntegration *i = s ? s->deviceIntegration() : qt_egl_device_integration();
+        QString outputName = s ? s->name() : QString();
+        if (m_kbdMgr && !i->kbdDeviceName(outputName).isEmpty())
+            associated = m_kbdMgr->setWindow(i->kbdDeviceName(outputName), window);
+    }
+    return associated;
+}
+
+void QEglFSIntegration::handleScreenChange()
+{
+    associateInputHandlers(qobject_cast<QWindow *>(sender()));
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h b/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
index 3a68ed968a..b2f66497d0 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
+++ b/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
@@ -112,10 +112,14 @@ public:
     void addScreen(QPlatformScreen *screen, bool isPrimary = false);
     void removeScreen(QPlatformScreen *screen);
 
+private slots:
+    void handleScreenChange();
+
 private:
     EGLNativeDisplayType nativeDisplay() const;
     EGLNativeDisplayType nativeDisplay(QEglFSDeviceIntegration *integration) const;
     void createInputHandlers();
+    bool associateInputHandlers(QWindow *window) const;
     static void loadKeymapStatic(const QString &filename);
 
     QJsonDocument m_configJson;
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
index 73f6309258..12eea4b872 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
@@ -150,4 +150,9 @@ QKmsScreenConfig *QEglFSKmsIntegration::screenConfig() const
     return m_screenConfig;
 }
 
+QString QEglFSKmsIntegration::kbdDeviceName(QString &output) const
+{
+    return m_screenConfig->outputSettings().value(output).value(QStringLiteral("keyboardDevice")).toString();
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
index c1752c5423..fc53c68585 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
@@ -72,6 +72,8 @@ public:
     void waitForVSync(QPlatformSurface *surface) const override;
     bool supportsPBuffers() const override;
 
+    QString kbdDeviceName(QString &output) const override;
+
     QKmsDevice *device() const;
     QKmsScreenConfig *screenConfig() const;
 
