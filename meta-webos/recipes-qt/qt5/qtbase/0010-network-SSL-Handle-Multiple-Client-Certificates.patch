From 44c642fefc117761510580287b29fef80aff51f0 Mon Sep 17 00:00:00 2001
From: Martin Jansa <Martin.Jansa@gmail.com>
Date: Mon, 9 Jun 2014 11:59:11 +0200
Subject: [PATCH] network: SSL Handle Multiple Client Certificates

Change-Id: I4054c897876b407b394e2418c7b25fb63b511207
Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 src/network/ssl/qsslcertificate_openssl.cpp   | 10 ++++
 src/network/ssl/qsslcertificate_p.h           |  1 +
 src/network/ssl/qsslconfiguration.cpp         | 12 +++++
 src/network/ssl/qsslconfiguration.h           |  3 ++
 src/network/ssl/qsslconfiguration_p.h         |  1 +
 src/network/ssl/qsslcontext_openssl_p.h       |  2 +-
 src/network/ssl/qsslsocket.cpp                |  1 +
 src/network/ssl/qsslsocket_openssl.cpp        | 46 +++++++++++++++++++
 src/network/ssl/qsslsocket_openssl_p.h        |  2 +
 .../ssl/qsslsocket_openssl_symbols.cpp        |  4 ++
 .../ssl/qsslsocket_openssl_symbols_p.h        |  4 ++
 src/network/ssl/qsslsocket_p.h                |  1 +
 12 files changed, 86 insertions(+), 1 deletion(-)

diff --git a/src/network/ssl/qsslcertificate_openssl.cpp b/src/network/ssl/qsslcertificate_openssl.cpp
index fce150d79d..f36c09ea37 100644
--- a/src/network/ssl/qsslcertificate_openssl.cpp
+++ b/src/network/ssl/qsslcertificate_openssl.cpp
@@ -597,6 +597,16 @@ QByteArray QSslCertificatePrivate::asn1ObjectName(ASN1_OBJECT *object)
     return asn1ObjectId(object);
 }
 
+bool QSslCertificatePrivate::matches_X509_NAME(const QSslCertificate &certificate, X509_NAME *name)
+{
+    QMap<QByteArray, QString> info = _q_mapFromX509Name(name);
+    QMutexLocker lock(QMutexPool::globalInstanceGet(certificate.d.data()));
+    // lazy init
+    if (certificate.d->issuerInfo.isEmpty() && certificate.d->x509)
+        certificate.d->issuerInfo = _q_mapFromX509Name(q_X509_get_issuer_name(certificate.d->x509));
+    return (certificate.d->issuerInfo == info);
+}
+
 static QMap<QByteArray, QString> _q_mapFromX509Name(X509_NAME *name)
 {
     QMap<QByteArray, QString> info;
diff --git a/src/network/ssl/qsslcertificate_p.h b/src/network/ssl/qsslcertificate_p.h
index 0397845f8d..a2c2faa861 100644
--- a/src/network/ssl/qsslcertificate_p.h
+++ b/src/network/ssl/qsslcertificate_p.h
@@ -129,6 +129,7 @@ public:
     static bool isBlacklisted(const QSslCertificate &certificate);
     static QSslCertificateExtension convertExtension(X509_EXTENSION *ext);
     static QByteArray subjectInfoToString(QSslCertificate::SubjectInfo info);
+    static bool matches_X509_NAME(const QSslCertificate &certificate, X509_NAME *name);
 
     friend class QSslSocketBackendPrivate;
 
diff --git a/src/network/ssl/qsslconfiguration.cpp b/src/network/ssl/qsslconfiguration.cpp
index 52ddf8bb88..952c72a10b 100644
--- a/src/network/ssl/qsslconfiguration.cpp
+++ b/src/network/ssl/qsslconfiguration.cpp
@@ -208,6 +208,7 @@ bool QSslConfiguration::operator==(const QSslConfiguration &other) const
     return d->peerCertificate == other.d->peerCertificate &&
         d->peerCertificateChain == other.d->peerCertificateChain &&
         d->localCertificateChain == other.d->localCertificateChain &&
+        d->localCertificates == other.d->localCertificates &&
         d->privateKey == other.d->privateKey &&
         d->sessionCipher == other.d->sessionCipher &&
         d->sessionProtocol == other.d->sessionProtocol &&
@@ -261,6 +262,7 @@ bool QSslConfiguration::isNull() const
             d->ephemeralServerKey.isNull() &&
             d->dhParams == QSslDiffieHellmanParameters::defaultParameters() &&
             d->localCertificateChain.isEmpty() &&
+            d->localCertificates.count() == 0 &&
             d->privateKey.isNull() &&
             d->peerCertificate.isNull() &&
             d->peerCertificateChain.count() == 0 &&
@@ -442,6 +444,16 @@ void QSslConfiguration::setLocalCertificate(const QSslCertificate &certificate)
     d->localCertificateChain += certificate;
 }
 
+QList<QPair<QSslCertificate, QSslKey> > QSslConfiguration::localCertificates() const
+{
+    return d->localCertificates;
+}
+
+void QSslConfiguration::setLocalCertificates(const QList<QPair<QSslCertificate, QSslKey> > &certificates)
+{
+    d->localCertificates = certificates;
+}
+
 /*!
     Returns the peer's digital certificate (i.e., the immediate
     certificate of the host you are connected to), or a null
diff --git a/src/network/ssl/qsslconfiguration.h b/src/network/ssl/qsslconfiguration.h
index fe4181d755..82f431570f 100644
--- a/src/network/ssl/qsslconfiguration.h
+++ b/src/network/ssl/qsslconfiguration.h
@@ -111,6 +111,9 @@ public:
     QSslCertificate localCertificate() const;
     void setLocalCertificate(const QSslCertificate &certificate);
 
+    QList<QPair<QSslCertificate, QSslKey> > localCertificates() const;
+    void setLocalCertificates(const QList<QPair<QSslCertificate, QSslKey> > &certificates);
+
     QSslCertificate peerCertificate() const;
     QList<QSslCertificate> peerCertificateChain() const;
     QSslCipher sessionCipher() const;
diff --git a/src/network/ssl/qsslconfiguration_p.h b/src/network/ssl/qsslconfiguration_p.h
index 38a98239db..9b513dc22d 100644
--- a/src/network/ssl/qsslconfiguration_p.h
+++ b/src/network/ssl/qsslconfiguration_p.h
@@ -102,6 +102,7 @@ public:
 
     QList<QSslCertificate> localCertificateChain;
 
+    QList<QPair<QSslCertificate, QSslKey> > localCertificates;
     QSslKey privateKey;
     QSslCipher sessionCipher;
     QSsl::SslProtocol sessionProtocol;
diff --git a/src/network/ssl/qsslcontext_openssl_p.h b/src/network/ssl/qsslcontext_openssl_p.h
index 48beebf134..6a1bfeed19 100644
--- a/src/network/ssl/qsslcontext_openssl_p.h
+++ b/src/network/ssl/qsslcontext_openssl_p.h
@@ -99,6 +99,7 @@ public:
     };
     NPNContext npnContext() const;
 #endif // OPENSSL_VERSION_NUMBER >= 0x1000100fL ...
+    SSL_CTX* ctx;
 
 protected:
     QSslContext();
@@ -110,7 +111,6 @@ private:
     static void applyBackendConfig(QSslContext *sslContext);
 
 private:
-    SSL_CTX* ctx;
     EVP_PKEY *pkey;
     SSL_SESSION *session;
     QByteArray m_sessionASN1;
diff --git a/src/network/ssl/qsslsocket.cpp b/src/network/ssl/qsslsocket.cpp
index ee157082ea..dfc0711a1d 100644
--- a/src/network/ssl/qsslsocket.cpp
+++ b/src/network/ssl/qsslsocket.cpp
@@ -2250,6 +2250,7 @@ void QSslConfigurationPrivate::deepCopyDefaultConfiguration(QSslConfigurationPri
     ptr->peerCertificate = global->peerCertificate;
     ptr->peerCertificateChain = global->peerCertificateChain;
     ptr->localCertificateChain = global->localCertificateChain;
+    ptr->localCertificates = global->localCertificates;
     ptr->privateKey = global->privateKey;
     ptr->sessionCipher = global->sessionCipher;
     ptr->sessionProtocol = global->sessionProtocol;
diff --git a/src/network/ssl/qsslsocket_openssl.cpp b/src/network/ssl/qsslsocket_openssl.cpp
index 1067b8af80..ab556b58ae 100644
--- a/src/network/ssl/qsslsocket_openssl.cpp
+++ b/src/network/ssl/qsslsocket_openssl.cpp
@@ -91,6 +91,7 @@ QT_BEGIN_NAMESPACE
 bool QSslSocketPrivate::s_libraryLoaded = false;
 bool QSslSocketPrivate::s_loadedCiphersAndCerts = false;
 bool QSslSocketPrivate::s_loadRootCertsOnDemand = false;
+int QSslSocketPrivate::s_sslDataIndex = -1;
 
 #if OPENSSL_VERSION_NUMBER >= 0x10001000L
 int QSslSocketBackendPrivate::s_indexForSSLExtraData = -1;
@@ -292,6 +293,48 @@ long QSslSocketBackendPrivate::setupOpenSslOptions(QSsl::SslProtocol protocol, Q
     return options;
 }
 
+int QSslSocketBackendPrivate::clientCert(SSL *ssl_, X509 **x509_, EVP_PKEY **pkey_)
+{
+    STACK_OF(X509_NAME)* ca_sk;
+    ca_sk = q_SSL_get_client_CA_list(ssl_);
+    for(int i = 0; i < q_sk_X509_NAME_num(ca_sk); i++) {
+        X509_NAME *name = q_sk_X509_NAME_value(ca_sk, i);
+        for (int j = 0; j < configuration.localCertificates.size(); j++) {
+            if (QSslCertificatePrivate::matches_X509_NAME(configuration.localCertificates[j].first, name)) {
+                EVP_PKEY *pkey;
+                if (configuration.localCertificates[j].second.algorithm() == QSsl::Opaque) {
+                    pkey = reinterpret_cast<EVP_PKEY *>(configuration.localCertificates[j].second.handle());
+                } else {
+                    // Load private key
+                    pkey = q_EVP_PKEY_new();
+                    // before we were using EVP_PKEY_assign_R* functions and did not use EVP_PKEY_free.
+                    // this lead to a memory leak. Now we use the *_set1_* functions which do not
+                    // take ownership of the RSA/DSA key instance because the QSslKey already has ownership.
+                    if (configuration.localCertificates[j].second.algorithm() == QSsl::Rsa)
+                        q_EVP_PKEY_set1_RSA(pkey, reinterpret_cast<RSA *>(configuration.localCertificates[j].second.handle()));
+                    else
+                        q_EVP_PKEY_set1_DSA(pkey, reinterpret_cast<DSA *>(configuration.localCertificates[j].second.handle()));
+                }
+
+                *x509_ = q_X509_dup(reinterpret_cast<X509 *>(configuration.localCertificates[j].first.handle()));
+                *pkey_ = pkey;
+
+                return 1;
+            }
+        }
+    }
+	return 0;
+}
+
+int QSslSocketBackendPrivate::clientCertCb(SSL *ssl, X509 **x509, EVP_PKEY **pkey)
+{
+    //TODO in Chromium corresponding struct is found by index, not by pointer
+    QSslSocketBackendPrivate* socket = static_cast<QSslSocketBackendPrivate*>(q_SSL_get_ex_data(ssl, s_sslDataIndex));
+    if (socket)
+        return socket->clientCert(ssl, x509, pkey);
+    return 0;
+}
+
 bool QSslSocketBackendPrivate::initSslContext()
 {
     Q_Q(QSslSocket);
@@ -318,6 +361,9 @@ bool QSslSocketBackendPrivate::initSslContext()
         return false;
     }
 
+    q_SSL_set_ex_data(ssl, s_sslDataIndex, this);
+    q_SSL_CTX_set_client_cert_cb(sslContextPointer->ctx, clientCertCb);
+
     if (configuration.protocol != QSsl::SslV2 &&
         configuration.protocol != QSsl::SslV3 &&
         configuration.protocol != QSsl::UnknownProtocol &&
diff --git a/src/network/ssl/qsslsocket_openssl_p.h b/src/network/ssl/qsslsocket_openssl_p.h
index 2a800cdc34..be0c620d02 100644
--- a/src/network/ssl/qsslsocket_openssl_p.h
+++ b/src/network/ssl/qsslsocket_openssl_p.h
@@ -159,6 +159,8 @@ public:
                              QSslKey *key, QSslCertificate *cert,
                              QList<QSslCertificate> *caCertificates,
                              const QByteArray &passPhrase);
+    static int clientCertCb(SSL *ssl, X509 **x509, EVP_PKEY **pkey);
+    int clientCert(SSL *ssl, X509 **x509, EVP_PKEY **pkey);
 };
 
 #ifdef Q_OS_WIN
diff --git a/src/network/ssl/qsslsocket_openssl_symbols.cpp b/src/network/ssl/qsslsocket_openssl_symbols.cpp
index 59c93677dd..a053932d28 100644
--- a/src/network/ssl/qsslsocket_openssl_symbols.cpp
+++ b/src/network/ssl/qsslsocket_openssl_symbols.cpp
@@ -496,6 +496,8 @@ DEFINEFUNC(int, X509_STORE_CTX_get_error_depth, X509_STORE_CTX *a, a, return -1,
 DEFINEFUNC(X509 *, X509_STORE_CTX_get_current_cert, X509_STORE_CTX *a, a, return 0, return)
 DEFINEFUNC(X509_STORE_CTX *, X509_STORE_CTX_new, DUMMYARG, DUMMYARG, return 0, return)
 DEFINEFUNC3(int, SSL_CTX_load_verify_locations, SSL_CTX *ctx, ctx, const char *CAfile, CAfile, const char *CApath, CApath, return 0, return)
+DEFINEFUNC2(void, SSL_CTX_set_client_cert_cb, SSL_CTX *ctx, ctx, int (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey), client_cert_cb, return, DUMMYARG)
+DEFINEFUNC(STACK_OF(X509_NAME) *, SSL_get_client_CA_list, const SSL *s, s, return 0, return)
 DEFINEFUNC2(int, i2d_SSL_SESSION, SSL_SESSION *in, in, unsigned char **pp, pp, return 0, return)
 DEFINEFUNC3(SSL_SESSION *, d2i_SSL_SESSION, SSL_SESSION **a, a, const unsigned char **pp, pp, long length, length, return 0, return)
 #if OPENSSL_VERSION_NUMBER >= 0x1000100fL && !defined(OPENSSL_NO_NEXTPROTONEG)
@@ -1227,6 +1229,8 @@ bool q_resolveOpenSslSymbols()
     RESOLVEFUNC(d2i_X509)
     RESOLVEFUNC(i2d_X509)
     RESOLVEFUNC(SSL_CTX_load_verify_locations)
+    RESOLVEFUNC(SSL_CTX_set_client_cert_cb)
+    RESOLVEFUNC(SSL_get_client_CA_list)
     RESOLVEFUNC(i2d_SSL_SESSION)
     RESOLVEFUNC(d2i_SSL_SESSION)
 #if OPENSSL_VERSION_NUMBER >= 0x1000100fL && !defined(OPENSSL_NO_NEXTPROTONEG)
diff --git a/src/network/ssl/qsslsocket_openssl_symbols_p.h b/src/network/ssl/qsslsocket_openssl_symbols_p.h
index 68b519d74e..8df91c7804 100644
--- a/src/network/ssl/qsslsocket_openssl_symbols_p.h
+++ b/src/network/ssl/qsslsocket_openssl_symbols_p.h
@@ -489,6 +489,8 @@ void q_GENERAL_NAME_free(GENERAL_NAME *a);
 
 #define q_sk_X509_num(st) q_SKM_sk_num(X509, (st))
 #define q_sk_X509_value(st, i) q_SKM_sk_value(X509, (st), (i))
+#define q_sk_X509_NAME_num(st) q_SKM_sk_num(X509_NAME, (st))
+#define q_sk_X509_NAME_value(st, i) q_SKM_sk_value(X509_NAME, (st), (i))
 #define q_sk_SSL_CIPHER_num(st) q_SKM_sk_num(SSL_CIPHER, (st))
 #define q_sk_SSL_CIPHER_value(st, i) q_SKM_sk_value(SSL_CIPHER, (st), (i))
 #define q_SSL_CTX_add_extra_chain_cert(ctx,x509) \
@@ -499,6 +501,8 @@ void q_GENERAL_NAME_free(GENERAL_NAME *a);
                                         (char *)(dsa))
 #define q_OpenSSL_add_all_algorithms() q_OPENSSL_add_all_algorithms_conf()
 int q_SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile, const char *CApath);
+void q_SSL_CTX_set_client_cert_cb(SSL_CTX *ctx, int (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey));
+STACK_OF(X509_NAME) *q_SSL_get_client_CA_list(const SSL *s);
 int q_i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
 SSL_SESSION *q_d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp, long length);
 
diff --git a/src/network/ssl/qsslsocket_p.h b/src/network/ssl/qsslsocket_p.h
index 6f34c6c888..7111e8eb92 100644
--- a/src/network/ssl/qsslsocket_p.h
+++ b/src/network/ssl/qsslsocket_p.h
@@ -218,6 +218,7 @@ private:
     static bool s_loadedCiphersAndCerts;
 protected:
     bool verifyErrorsHaveBeenIgnored();
+    static int s_sslDataIndex;
     bool paused;
     bool flushTriggered;
 };
