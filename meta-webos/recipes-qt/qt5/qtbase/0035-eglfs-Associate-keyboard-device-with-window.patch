From 663e93dc712c58f28d88e71b94608e5c243cbf24 Mon Sep 17 00:00:00 2001
From: Jaeyoon Jung <jaeyoon.jung@lge.com>
Date: Thu, 5 Jul 2018 16:10:46 +0900
Subject: [PATCH] eglfs: Associate keyboard device with window

:Release Notes:
Add an optional "keyboardDevice" field in QT_QPA_EGLFS_CONFIG and make
an association between the device and the window under the given output.

:Detailed Notes:
If QT_QPA_EGLFS_CONFIG specifies "keyboardDevice" for a certain output
then the keyboard handler for that device will have a reference to a
window which belongs to that output. Then all events handled there will
be delivered to that window directly.
It is assumed in this patch that a screen has only one window. If a
screen has multiple windows, then the latest window created or moved to
that screen will be used.
If a keyboard device is not associated with any output, then the handler
will have a null reference for the target window which results in events
to be delivered to the focused window.
This is not yet implemented for keyboard plugins other than Evdev.

:Testing Performed:
Confirmed keyboard events are delivered to the window associated.

:QA Notes:

:Issues Addressed:
[PLAT-61071] Improve the event handling flow for multi display
[PLAT-58591] Associate keyboard and display on static mode

Change-Id: I835721c5d482eaec7220aa435e2f00cdb04f2a68
---
 .../input/evdevkeyboard/qevdevkeyboardhandler.cpp    | 15 +++++++++++++--
 .../input/evdevkeyboard/qevdevkeyboardhandler_p.h    |  5 +++++
 .../input/evdevkeyboard/qevdevkeyboardmanager.cpp    | 11 +++++++++++
 .../input/evdevkeyboard/qevdevkeyboardmanager_p.h    |  3 +++
 .../platforms/eglfs/api/qeglfsdeviceintegration.cpp  |  6 ++++++
 .../platforms/eglfs/api/qeglfsdeviceintegration_p.h  |  2 ++
 .../platforms/eglfs/api/qeglfsintegration.cpp        | 20 ++++++++++++++++++++
 .../platforms/eglfs/api/qeglfsintegration_p.h        |  4 ++++
 .../eglfs_kms_support/qeglfskmsintegration.cpp       |  5 +++++
 .../eglfs_kms_support/qeglfskmsintegration.h         |  2 ++
 10 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler.cpp b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler.cpp
index ad134a8..e4586b3 100644
--- a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler.cpp
+++ b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler.cpp
@@ -77,7 +77,8 @@ QEvdevKeyboardHandler::QEvdevKeyboardHandler(const QString &device, QFdContainer
     : m_device(device), m_fd(fd.release()), m_notify(nullptr),
       m_modifiers(0), m_composing(0), m_dead_unicode(0xffff),
       m_langLock(0), m_no_zap(disableZap), m_do_compose(enableCompose),
-      m_keymap(0), m_keymap_size(0), m_keycompose(0), m_keycompose_size(0)
+      m_keymap(0), m_keymap_size(0), m_keycompose(0), m_keycompose_size(0),
+      m_window(0)
 {
     qCDebug(qLcEvdevKey) << "Create keyboard handler with for device" << device;
 
@@ -228,7 +229,9 @@ void QEvdevKeyboardHandler::processKeyEvent(int nativecode, int unicode, int qtc
     if (!autoRepeat)
         QGuiApplicationPrivate::inputDeviceManager()->setKeyboardModifiers(QEvdevKeyboardHandler::toQtModifiers(m_modifiers));
 
-    QWindowSystemInterface::handleExtendedKeyEvent(0, (isPress ? QEvent::KeyPress : QEvent::KeyRelease),
+    if (m_window)
+        m_window->requestActivate();
+    QWindowSystemInterface::handleExtendedKeyEvent(m_window, (isPress ? QEvent::KeyPress : QEvent::KeyRelease),
                                                    qtcode, modifiers, nativecode + 8, 0, int(modifiers),
                                                    (unicode != 0xffff ) ? QString(unicode) : QString(), autoRepeat);
 }
@@ -579,4 +582,12 @@ void QEvdevKeyboardHandler::switchLang()
     m_langLock ^= 1;
 }
 
+void QEvdevKeyboardHandler::setWindow(QWindow *window)
+{
+    if (m_window != window) {
+        qCDebug(qLcEvdevKey) << "keyboard device" << m_device << "is now associated with window" << window;
+        m_window = window;
+    }
+}
+
 QT_END_NAMESPACE
diff --git a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler_p.h b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler_p.h
index 5498a3e..baf772e 100644
--- a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler_p.h
+++ b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardhandler_p.h
@@ -54,6 +54,7 @@
 #include <qobject.h>
 #include <QTimer>
 #include <QDataStream>
+#include <QWindow>
 
 QT_BEGIN_NAMESPACE
 
@@ -194,6 +195,8 @@ public:
 
     void switchLang();
 
+    void setWindow(QWindow *window);
+
 private:
     void processKeyEvent(int nativecode, int unicode, int qtcode,
                          Qt::KeyboardModifiers modifiers, bool isPress, bool autoRepeat);
@@ -218,6 +221,8 @@ private:
     const QEvdevKeyboardMap::Composing *m_keycompose;
     int m_keycompose_size;
 
+    QWindow *m_window;
+
     static const QEvdevKeyboardMap::Mapping s_keymap_default[];
     static const QEvdevKeyboardMap::Composing s_keycompose_default[];
 };
diff --git a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager.cpp b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager.cpp
index e1659bc..3dccf08 100644
--- a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager.cpp
+++ b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager.cpp
@@ -159,4 +159,15 @@ void QEvdevKeyboardManager::switchLang()
         handler->switchLang();
 }
 
+bool QEvdevKeyboardManager::setWindow(const QString &deviceNode, QWindow *window)
+{
+    if (m_keyboards.contains(deviceNode)) {
+        foreach (QEvdevKeyboardHandler *handler, m_keyboards.values(deviceNode))
+            handler->setWindow(window);
+        return true;
+    }
+
+    return false;
+}
+
 QT_END_NAMESPACE
diff --git a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager_p.h b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager_p.h
index 326e438..d26590e 100644
--- a/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager_p.h
+++ b/src/platformsupport/input/evdevkeyboard/qevdevkeyboardmanager_p.h
@@ -58,6 +58,7 @@
 #include <QObject>
 #include <QHash>
 #include <QSocketNotifier>
+#include <QWindow>
 
 QT_BEGIN_NAMESPACE
 
@@ -73,6 +74,8 @@ public:
     void addKeyboard(const QString &deviceNode = QString());
     void removeKeyboard(const QString &deviceNode);
 
+    bool setWindow(const QString &deviceNode, QWindow *window);
+
 private:
     QString m_spec;
     QHash<QString,QEvdevKeyboardHandler*> m_keyboards;
diff --git a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
index 8e71a49..cc103d8 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
+++ b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
@@ -406,4 +406,10 @@ EGLConfig QEglFSDeviceIntegration::chooseConfig(EGLDisplay display, const QSurfa
     return chooser.chooseConfig();
 }
 
+QString QEglFSDeviceIntegration::kbdDeviceName(QString &output) const
+{
+    Q_UNUSED(output);
+    return QString();
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
index a22d197..e38a69c 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
+++ b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
@@ -111,6 +111,8 @@ public:
     virtual void *nativeResourceForScreen(const QByteArray &resource, QScreen *screen);
     virtual void *wlDisplay() const;
 
+    virtual QString kbdDeviceName(QString &output) const;
+
     static EGLConfig chooseConfig(EGLDisplay display, const QSurfaceFormat &format);
     static EGLConfig chooseConfig(EGLDisplay display, const QSurfaceFormat &format, QEglFSDeviceIntegration *integration);
 };
diff --git a/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp b/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
index 93710b5..8880da1 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
+++ b/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
@@ -281,6 +281,8 @@ QPlatformWindow *QEglFSIntegration::createPlatformWindow(QWindow *window) const
     // Activate only the window for the primary screen to make input work
     if (window->type() != Qt::ToolTip && window->screen() == QGuiApplication::primaryScreen())
         w->requestActivateWindow();
+    if (associateInputHandlers(window))
+        connect(window, &QWindow::screenChanged, this, &QEglFSIntegration::handleScreenChange);
 
     return w;
 }
@@ -613,4 +615,22 @@ EGLNativeDisplayType QEglFSIntegration::nativeDisplay(QEglFSDeviceIntegration *i
     return integration->platformDisplay();
 }
 
+bool QEglFSIntegration::associateInputHandlers(QWindow *window) const
+{
+    bool associated = false;
+    if (window) {
+        QEglFSScreen *s = window->screen() ? static_cast<QEglFSScreen *>(window->screen()->handle()) : NULL;
+        QEglFSDeviceIntegration *i = s ? s->deviceIntegration() : qt_egl_device_integration();
+        QString outputName = s ? s->name() : QString();
+        if (m_kbdMgr && !i->kbdDeviceName(outputName).isEmpty())
+            associated = m_kbdMgr->setWindow(i->kbdDeviceName(outputName), window);
+    }
+    return associated;
+}
+
+void QEglFSIntegration::handleScreenChange(QScreen *screen)
+{
+    associateInputHandlers(qobject_cast<QWindow *>(sender()));
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h b/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
index 2bf5ed0..9d018f3 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
+++ b/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
@@ -109,10 +109,14 @@ public:
 
     QFbVtHandler *vtHandler() { return m_vtHandler.data(); }
 
+private slots:
+    void handleScreenChange(QScreen *screen);
+
 private:
     EGLNativeDisplayType nativeDisplay() const;
     EGLNativeDisplayType nativeDisplay(QEglFSDeviceIntegration *integration) const;
     void createInputHandlers();
+    bool associateInputHandlers(QWindow *window) const;
     static void loadKeymapStatic(const QString &filename);
     static void switchLangStatic();
 
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
index 3873618..7b5f4e6 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
@@ -174,4 +174,9 @@ QKmsScreenConfig *QEglFSKmsIntegration::screenConfig() const
     return m_screenConfig;
 }
 
+QString QEglFSKmsIntegration::kbdDeviceName(QString &output) const
+{
+    return m_screenConfig->outputSettings().value(output).value(QStringLiteral("keyboardDevice")).toString();
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
index 3fa6a0a..09567d5 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
@@ -74,6 +74,8 @@ public:
     void *nativeResourceForIntegration(const QByteArray &name) override;
     void *nativeResourceForScreen(const QByteArray &resource, QScreen *screen) override;
 
+    QString kbdDeviceName(QString &output) const override;
+
     QKmsDevice *device() const;
     QKmsScreenConfig *screenConfig() const;
 
