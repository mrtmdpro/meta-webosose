From 7473b4fa3cf1da325529919df347fea0ecc5ddc1 Mon Sep 17 00:00:00 2001
From: Paolo Angelelli <paolo.angelelli@theqtcompany.com>
Date: Thu, 3 Dec 2015 10:57:55 +0100
Subject: [PATCH] Fix for deferredDelete() bug when calling the glib loop
 directly

This patch makes sure that all events posted using Qt on
top of the GLib event loop have the loopLevel counter incremented.
This is done since Qt somehow seems to assume that all deleteLater()
calls are issued within the scope of some signal handler ( in other
words, triggered by the chain sendEvent() ->notifyInternal2() )
There is a side effect though.
In the conditions affected by this patch, that is deleteLater()s
issued within a glib event handler for example, manually calling
processEvents or sendPostedEvents with or without the
QEvent::DeferredDelete flag has the same effect, and deferred deleted
events are always processed.
This side effect seems to be difficult to avoid without separating
sendPostedEvents and processEvents into public and private, in order
to detect when they are manually called. This  could perhaps be done
for Qt6.
An autotest for QTBUG-36434 is also included.
Autotesting for QTBUG-32859 seems to be more challenging in this
respect, due to its dependency on GLib.

Task-number: QTBUG-32859
Task-number: QTBUG-36434

Upstream-Status: Backport
- Backported from upstream dev branch review
[https://codereview.qt-project.org/#/c/142309/14]

Change-Id: I29ae1aa08e893df40ba36a05d8e744c850a4261b
---
 src/corelib/kernel/qcoreapplication.cpp           | 27 +++++--
 src/corelib/thread/qthread.cpp                    |  2 +-
 src/corelib/thread/qthread_p.h                    |  5 +-
 tests/auto/corelib/kernel/qobject/tst_qobject.cpp | 97 +++++++++++++++++++++++
 4 files changed, 122 insertions(+), 9 deletions(-)

diff --git a/src/corelib/kernel/qcoreapplication.cpp b/src/corelib/kernel/qcoreapplication.cpp
index bd3c12c..b502b3e 100644
--- a/src/corelib/kernel/qcoreapplication.cpp
+++ b/src/corelib/kernel/qcoreapplication.cpp
@@ -1425,8 +1425,22 @@ void QCoreApplication::postEvent(QObject *receiver, QEvent *event, int priority)
 
     if (event->type() == QEvent::DeferredDelete && data == QThreadData::current()) {
         // remember the current running eventloop for DeferredDelete
-        // events posted in the receiver's thread
-        static_cast<QDeferredDeleteEvent *>(event)->level = data->loopLevel;
+        // events posted in the receiver's thread.
+
+        // Bound the minimum scoped loopLevel increment to 1, if loopLevel is > 0.
+        // This because deferred delete events sent via glib event loop/handlers directly
+        // do not "benefit" from a hidden QScopedLoopLevelCounter objecs, since
+        // sendPostedEvents seems to somehow assume that deleteLater() is always called
+        // within the scope of an event handler.
+        // The side effect is that manual invocations to processEvents or sendPostedEvents
+        // in such conditions (like in a glib event handler) will also process deferred
+        // delete events.
+        // Possible solution (for Qt6): separate sendPostedEvents and processEvents into
+        // public and private, to enable detection of manually called ones.
+
+        int loopLevel = data->loopLevel;
+        int minIncrement = loopLevel ? 1 : 0;
+        static_cast<QDeferredDeleteEvent *>(event)->level = loopLevel + qMax(minIncrement, data->scopedIncrements);
     }
 
     // delete the event on exceptions to protect against memory leaks till the event is
@@ -1597,12 +1611,13 @@ void QCoreApplicationPrivate::sendPostedEvents(QObject *receiver, int event_type
             // DeferredDelete events are only sent when we are explicitly asked to
             // (s.a. QEvent::DeferredDelete), and then only if the event loop that
             // posted the event has returned.
-            int loopLevel = static_cast<QDeferredDeleteEvent *>(pe.event)->loopLevel();
+            int eventLoopLevel = static_cast<QDeferredDeleteEvent *>(pe.event)->loopLevel();
+            int loopLoopLevel = data->loopLevel + data->scopedIncrements;
             const bool allowDeferredDelete =
-                (loopLevel > data->loopLevel
-                 || (!loopLevel && data->loopLevel > 0)
+                (eventLoopLevel > loopLoopLevel
+                 || (!eventLoopLevel && loopLoopLevel > 0)
                  || (event_type == QEvent::DeferredDelete
-                     && loopLevel == data->loopLevel));
+                     && eventLoopLevel == loopLoopLevel));
             if (!allowDeferredDelete) {
                 // cannot send deferred delete
                 if (!event_type && !receiver) {
diff --git a/src/corelib/thread/qthread.cpp b/src/corelib/thread/qthread.cpp
index 8ea487e..7083a11 100644
--- a/src/corelib/thread/qthread.cpp
+++ b/src/corelib/thread/qthread.cpp
@@ -49,7 +49,7 @@ QT_BEGIN_NAMESPACE
 */
 
 QThreadData::QThreadData(int initialRefCount)
-    : _ref(initialRefCount), loopLevel(0), thread(0), threadId(0),
+    : _ref(initialRefCount), loopLevel(0), scopedIncrements(0), thread(0), threadId(0),
       eventDispatcher(0),
       quitNow(false), canWait(true), isAdopted(false), requiresCoreApplication(true)
 {
diff --git a/src/corelib/thread/qthread_p.h b/src/corelib/thread/qthread_p.h
index a56b879..5dc8ff5 100644
--- a/src/corelib/thread/qthread_p.h
+++ b/src/corelib/thread/qthread_p.h
@@ -272,6 +272,7 @@ private:
 
 public:
     int loopLevel;
+    int scopedIncrements;
 
     QStack<QEventLoop *> eventLoops;
     QPostEventList postEventList;
@@ -293,9 +294,9 @@ class QScopedLoopLevelCounter
 public:
     inline QScopedLoopLevelCounter(QThreadData *threadData)
         : threadData(threadData)
-    { ++threadData->loopLevel; }
+    {  ++threadData->scopedIncrements;  }
     inline ~QScopedLoopLevelCounter()
-    { --threadData->loopLevel; }
+    {  --threadData->scopedIncrements;  }
 };
 
 // thread wrapper for the main() thread
diff --git a/tests/auto/corelib/kernel/qobject/tst_qobject.cpp b/tests/auto/corelib/kernel/qobject/tst_qobject.cpp
index 427a73f..75eafc0 100644
--- a/tests/auto/corelib/kernel/qobject/tst_qobject.cpp
+++ b/tests/auto/corelib/kernel/qobject/tst_qobject.cpp
@@ -150,6 +150,7 @@ private slots:
     void exceptions();
     void noDeclarativeParentChangedOnDestruction();
     void mutableFunctor();
+    void deleteLaterInAboutToBlockHandler();
 };
 
 struct QObjectCreatedOnShutdown
@@ -5836,6 +5837,102 @@ void tst_QObject::connectFunctorWithContextUnique()
     QCOMPARE(receiver.count_slot1, 1);
 }
 
+class StatusChanger : public QObject
+{
+    //Q_OBJECT
+public:
+    StatusChanger(int *status) :m_status(status)
+    {
+    }
+    ~StatusChanger()
+    {
+        *m_status = 2;
+    }
+private:
+    int *m_status;
+};
+
+class DispatcherWatcher : public QObject
+{
+    Q_OBJECT
+public:
+    DispatcherWatcher(QEventLoop &e, int *statusAwake, int *statusAboutToBlock):
+        m_statusAboutToBlock(statusAboutToBlock)
+       ,m_statusAwake(statusAwake)
+       ,m_eventLoop(&e)
+       ,m_aboutToBlocks(0)
+       ,m_awakes(0)
+    {
+        awake = new StatusChanger(statusAwake);
+        abouttoblock = new StatusChanger(statusAboutToBlock);
+        QCOMPARE(*statusAwake,1);
+        QCOMPARE(*statusAboutToBlock,1);
+        connect(QAbstractEventDispatcher::instance(), SIGNAL(awake()), this, SLOT(onAwake()));
+        connect(QAbstractEventDispatcher::instance(), SIGNAL(aboutToBlock()), this, SLOT(onAboutToBlock()));
+
+    }
+
+    ~DispatcherWatcher()
+    {
+        if (awake)
+            awake->deleteLater();
+        if (abouttoblock)
+            abouttoblock->deleteLater();
+    }
+
+public slots:
+    // The order of these 2 handlers differs on different event dispatchers
+    void onAboutToBlock()
+    {
+        if (abouttoblock) {
+            abouttoblock->deleteLater();
+            abouttoblock = 0;
+        }
+        ++m_aboutToBlocks;
+    }
+    void onAwake()
+    {
+        if (awake) {
+            awake->deleteLater();
+            awake = 0;
+        }
+        ++m_awakes;
+
+    }
+    void onSignal1()
+    {
+        // Status check. At this point the event loop should have spinned enough to delete all the objects.
+        QCOMPARE(*m_statusAwake,2);
+        QCOMPARE(*m_statusAboutToBlock,2);
+        QMetaObject::invokeMethod(m_eventLoop, "quit", Qt::QueuedConnection);
+    }
+
+private:
+    StatusChanger *awake;
+    StatusChanger *abouttoblock;
+    QEventLoop    *m_eventLoop;
+    int *m_statusAwake;
+    int *m_statusAboutToBlock;
+    int m_aboutToBlocks;
+    int m_awakes;
+};
+
+
+void tst_QObject::deleteLaterInAboutToBlockHandler()
+{
+    int statusAwake        = 1;
+    int statusAboutToBlock = 1;
+    QEventLoop e;
+    DispatcherWatcher dw(e, &statusAwake, &statusAboutToBlock);
+    QTimer::singleShot(2000,&dw,&DispatcherWatcher::onSignal1);
+
+    QCOMPARE(statusAwake, 1);
+    QCOMPARE(statusAboutToBlock, 1);
+    e.exec();
+    QCOMPARE(statusAwake, 2);
+    QCOMPARE(statusAboutToBlock, 2);
+}
+
 class MyFunctor
 {
 public:
