From 284b14878b15a3a530baac397d92b13b467793ae Mon Sep 17 00:00:00 2001
From: Maxim Polyakov <maxim.polyakov@lge.com>
Date: Fri, 13 Nov 2015 10:36:57 +0300
Subject: [PATCH] Color emoji support

Add color emoji support.
1. Check font for color features
2. Provide color features to glyph loading
3. Render color glyph by freetype

Need to FontConfig library 2.11.94 and later.
Need to Freetype library with png support.

Upstream status: pending
---
 src/gui/text/qfont_p.h                             |   8 +-
 src/gui/text/qfontdatabase.cpp                     |   5 +-
 src/gui/text/qfontengine_ft.cpp                    | 129 ++++++++++++++-------
 src/gui/text/qfontengine_ft_p.h                    |   1 +
 src/gui/text/qplatformfontdatabase.cpp             |   8 +-
 src/gui/text/qplatformfontdatabase.h               |   2 +-
 .../fontdatabases/basic/qbasicfontdatabase.cpp     |   4 +-
 .../fontconfig/qfontconfigdatabase.cpp             |  23 +++-
 8 files changed, 123 insertions(+), 57 deletions(-)

diff --git a/src/gui/text/qfont_p.h b/src/gui/text/qfont_p.h
index ff9265c..198e517 100644
--- a/src/gui/text/qfont_p.h
+++ b/src/gui/text/qfont_p.h
@@ -66,7 +66,7 @@ struct QFontDef
           styleStrategy(QFont::PreferDefault), styleHint(QFont::AnyStyle),
           weight(50), fixedPitch(false), style(QFont::StyleNormal), stretch(100),
           hintingPreference(QFont::PreferDefaultHinting), ignorePitch(true),
-          fixedPitchComputed(0), reserved(0)
+          fixedPitchComputed(0), color(false), reserved(0)
     {
     }
 
@@ -89,7 +89,8 @@ struct QFontDef
     uint hintingPreference : 2;
     uint ignorePitch : 1;
     uint fixedPitchComputed : 1; // for Mac OS X only
-    int reserved   : 14; // for future extensions
+    uint color : 1; // Color emoji support
+    int reserved   : 13; // for future extensions
 
     bool exactMatch(const QFontDef &other) const;
     bool operator==(const QFontDef &other) const
@@ -104,6 +105,7 @@ struct QFontDef
                     && family == other.family
                     && styleName == other.styleName
                     && hintingPreference == other.hintingPreference
+                    && color == other.color
                           ;
     }
     inline bool operator<(const QFontDef &other) const
@@ -122,6 +124,7 @@ struct QFontDef
 
         if (ignorePitch != other.ignorePitch) return ignorePitch < other.ignorePitch;
         if (fixedPitch != other.fixedPitch) return fixedPitch < other.fixedPitch;
+        if (color != other.color) return color < other.color;
         return false;
     }
 };
@@ -139,6 +142,7 @@ inline uint qHash(const QFontDef &fd, uint seed = 0) Q_DECL_NOTHROW
         ^  qHash(fd.family, seed)
         ^  qHash(fd.styleName)
         ^  qHash(fd.hintingPreference)
+        ^  qHash(fd.color)
         ;
 }
 
diff --git a/src/gui/text/qfontdatabase.cpp b/src/gui/text/qfontdatabase.cpp
index 6425bed..8311659 100644
--- a/src/gui/text/qfontdatabase.cpp
+++ b/src/gui/text/qfontdatabase.cpp
@@ -239,6 +239,7 @@ struct QtFontStyle
     QString styleName;
 
     bool antialiased;
+    bool color;
 
     QtFontSize *pixelSize(unsigned short size, bool = false);
 };
@@ -736,7 +737,7 @@ QMutex *qt_fontdatabase_mutex()
 void qt_registerFont(const QString &familyName, const QString &stylename,
                      const QString &foundryname, int weight,
                      QFont::Style style, int stretch, bool antialiased,
-                     bool scalable, int pixelSize, bool fixedPitch,
+                     bool color, bool scalable, int pixelSize, bool fixedPitch,
                      const QSupportedWritingSystems &writingSystems, void *handle)
 {
     QFontDatabasePrivate *d = privateDb();
@@ -757,6 +758,7 @@ void qt_registerFont(const QString &familyName, const QString &stylename,
     QtFontStyle *fontStyle = foundry->style(styleKey, stylename, true);
     fontStyle->smoothScalable = scalable;
     fontStyle->antialiased = antialiased;
+    fontStyle->color = color;
     QtFontSize *size = fontStyle->pixelSize(pixelSize ? pixelSize : SMOOTH_SCALABLE, true);
     if (size->handle) {
         QPlatformIntegration *integration = QGuiApplicationPrivate::platformIntegration();
@@ -922,6 +924,7 @@ QFontEngine *loadSingleEngine(int script,
 
     QFontDef def = request;
     def.pixelSize = pixelSize;
+    def.color = style->color;
 
     QFontCache *fontCache = QFontCache::instance();
 
diff --git a/src/gui/text/qfontengine_ft.cpp b/src/gui/text/qfontengine_ft.cpp
index 1711865..8774af4 100644
--- a/src/gui/text/qfontengine_ft.cpp
+++ b/src/gui/text/qfontengine_ft.cpp
@@ -334,7 +334,7 @@ void QFreetypeFace::computeSize(const QFontDef &fontDef, int *xsize, int *ysize,
      * Bitmap only faces must match exactly, so find the closest
      * one (height dominant search)
      */
-    if (!(face->face_flags & FT_FACE_FLAG_SCALABLE)) {
+    if (!(face->face_flags & FT_FACE_FLAG_SCALABLE) || fontDef.color) {
         int best = 0;
         for (int i = 1; i < face->num_fixed_sizes; i++) {
             if (qAbs(*ysize -  face->available_sizes[i].y_ppem) <
@@ -661,7 +661,7 @@ QFontEngineFT::QFontEngineFT(const QFontDef &fd)
     lcdFilterType = (int)((quintptr) FT_LCD_FILTER_DEFAULT);
 #endif
     defaultFormat = Format_None;
-    embeddedbitmap = false;
+    embeddedbitmap = fd.color;
     const QByteArray env = qgetenv("QT_NO_FT_CACHE");
     cacheEnabled = env.isEmpty() || env.toInt() == 0;
     m_subPixelPositionCount = 4;
@@ -692,7 +692,7 @@ bool QFontEngineFT::init(FaceId faceId, bool antialias, GlyphFormat format,
     defaultFormat = format;
     this->antialias = antialias;
 
-    if (!antialias)
+    if (!antialias && !fontDef.color)
         glyphFormat = QFontEngine::Format_Mono;
     else
         glyphFormat = defaultFormat;
@@ -827,7 +827,8 @@ int QFontEngineFT::loadFlags(QGlyphSet *set, GlyphFormat format, int flags,
                 load_target = FT_LOAD_TARGET_LCD_V;
             vfactor = 3;
         }
-    }
+    } else if (format == Format_ARGB)
+        load_flags |= FT_LOAD_COLOR;
 
     if (set && set->outline_drawing)
         load_flags |= FT_LOAD_NO_BITMAP;
@@ -847,11 +848,11 @@ static inline bool areMetricsTooLarge(const QFontEngineFT::GlyphInfo &info)
 {
     // false if exceeds QFontEngineFT::Glyph metrics
     return (short)(info.linearAdvance) != info.linearAdvance
-            || (signed char)(info.xOff) != info.xOff
-            || (uchar)(info.width) != info.width
-            || (uchar)(info.height) != info.height
-            || (signed char)(info.x) != info.x
-            || (signed char)(info.y) != info.y;
+            || (signed)(info.xOff) != info.xOff
+            || (ushort)(info.width) != info.width
+            || (ushort)(info.height) != info.height
+            || (signed)(info.x) != info.x
+            || (signed)(info.y) != info.y;
 }
 
 QFontEngineFT::Glyph *QFontEngineFT::loadGlyph(QGlyphSet *set, uint glyph,
@@ -1122,48 +1123,68 @@ QFontEngineFT::Glyph *QFontEngineFT::loadGlyph(QGlyphSet *set, uint glyph,
         if (bitmap.buffer != glyph_buffer.data())
             delete [] bitmap.buffer;
     } else if (slot->format == FT_GLYPH_FORMAT_BITMAP) {
-        Q_ASSERT(slot->bitmap.pixel_mode == FT_PIXEL_MODE_MONO);
-        uchar *src = slot->bitmap.buffer;
-        uchar *dst = glyph_buffer.data();
-        int h = slot->bitmap.rows;
-        if (format == Format_Mono) {
-            int bytes = ((info.width + 7) & ~7) >> 3;
-            while (h--) {
-                memcpy (dst, src, bytes);
-                dst += pitch;
-                src += slot->bitmap.pitch;
+        if (slot->bitmap.pixel_mode == FT_PIXEL_MODE_BGRA) {
+            uchar *src = slot->bitmap.buffer;
+            uchar *dst = glyph_buffer.data();
+            for(uint h = 0; h < slot->bitmap.rows; ++h) {
+                uint hsrc = h * slot->bitmap.pitch;
+                uint hdst = h * pitch;
+                for (uint i = 0; i < slot->bitmap.width * 4; i += 4) {
+                    uchar b = src[hsrc + i + 0];
+                    uchar g = src[hsrc + i + 1];
+                    uchar r = src[hsrc + i + 2];
+                    uchar a = src[hsrc + i + 3];
+
+                    dst[hdst + i + 0] = r;
+                    dst[hdst + i + 1] = g;
+                    dst[hdst + i + 2] = b;
+                    dst[hdst + i + 3] = a;
+                }
             }
         } else {
-            if (hsubpixel) {
+            Q_ASSERT(slot->bitmap.pixel_mode == FT_PIXEL_MODE_MONO);
+            uchar *src = slot->bitmap.buffer;
+            uchar *dst = glyph_buffer.data();
+            int h = slot->bitmap.rows;
+            if (format == Format_Mono) {
+                int bytes = ((info.width + 7) & ~7) >> 3;
                 while (h--) {
-                    uint *dd = (uint *)dst;
-                    *dd++ = 0;
-                    for (int x = 0; x < static_cast<int>(slot->bitmap.width); x++) {
-                        uint a = ((src[x >> 3] & (0x80 >> (x & 7))) ? 0xffffff : 0x000000);
-                        *dd++ = a;
-                    }
-                    *dd++ = 0;
-                    dst += pitch;
-                    src += slot->bitmap.pitch;
-                }
-            } else if (vfactor != 1) {
-                while (h--) {
-                    uint *dd = (uint *)dst;
-                    for (int x = 0; x < static_cast<int>(slot->bitmap.width); x++) {
-                        uint a = ((src[x >> 3] & (0x80 >> (x & 7))) ? 0xffffff : 0x000000);
-                        *dd++ = a;
-                    }
+                    memcpy (dst, src, bytes);
                     dst += pitch;
                     src += slot->bitmap.pitch;
                 }
             } else {
-                while (h--) {
-                    for (int x = 0; x < static_cast<int>(slot->bitmap.width); x++) {
-                        unsigned char a = ((src[x >> 3] & (0x80 >> (x & 7))) ? 0xff : 0x00);
-                        dst[x] = a;
+                if (hsubpixel) {
+                    while (h--) {
+                        uint *dd = (uint *)dst;
+                        *dd++ = 0;
+                        for (int x = 0; x < static_cast<int>(slot->bitmap.width); x++) {
+                            uint a = ((src[x >> 3] & (0x80 >> (x & 7))) ? 0xffffff : 0x000000);
+                            *dd++ = a;
+                        }
+                        *dd++ = 0;
+                        dst += pitch;
+                        src += slot->bitmap.pitch;
+                    }
+                } else if (vfactor != 1) {
+                    while (h--) {
+                        uint *dd = (uint *)dst;
+                        for (int x = 0; x < static_cast<int>(slot->bitmap.width); x++) {
+                            uint a = ((src[x >> 3] & (0x80 >> (x & 7))) ? 0xffffff : 0x000000);
+                            *dd++ = a;
+                        }
+                        dst += pitch;
+                        src += slot->bitmap.pitch;
+                    }
+                } else {
+                    while (h--) {
+                        for (int x = 0; x < static_cast<int>(slot->bitmap.width); x++) {
+                            unsigned char a = ((src[x >> 3] & (0x80 >> (x & 7))) ? 0xff : 0x00);
+                            dst[x] = a;
+                        }
+                        dst += pitch;
+                        src += slot->bitmap.pitch;
                     }
-                    dst += pitch;
-                    src += slot->bitmap.pitch;
                 }
             }
         }
@@ -1731,6 +1752,7 @@ static inline QImage alphaMapFromGlyphData(QFontEngineFT::Glyph *glyph, QFontEng
         bytesPerLine = (glyph->width + 3) & ~3;
         break;
     case QFontEngine::Format_A32:
+    case QFontEngine::Format_ARGB:
         format = QImage::Format_ARGB32;
         bytesPerLine = glyph->width * 4;
         break;
@@ -1865,6 +1887,27 @@ QImage QFontEngineFT::alphaRGBMapForGlyph(glyph_t g, QFixed subPixelPosition, co
     return QFontEngine::alphaRGBMapForGlyph(g, subPixelPosition, t);
 }
 
+QImage QFontEngineFT::bitmapForGlyph(glyph_t g, QFixed subPixelPosition, const QTransform &t)
+{
+    lockFace();
+
+    QScopedPointer<Glyph> glyph(loadGlyphFor(g, subPixelPosition, fontDef.color ? Format_ARGB : Format_Mono, t));
+    if (!glyph || !glyph->data) {
+        unlockFace();
+        return QFontEngine::bitmapForGlyph(g, subPixelPosition, t);
+    }
+
+    QImage img(glyph->width, glyph->height, QImage::Format_ARGB32);
+    memcpy(img.bits(), glyph->data, 4 * glyph->width * glyph->height);
+
+    if (cacheEnabled)
+        glyph.take();
+
+    unlockFace();
+
+    return img;
+}
+
 void QFontEngineFT::removeGlyphFromCache(glyph_t glyph)
 {
     defaultGlyphSet.removeGlyphFromCache(glyph, 0);
diff --git a/src/gui/text/qfontengine_ft_p.h b/src/gui/text/qfontengine_ft_p.h
index a1bd21d..28b7244 100644
--- a/src/gui/text/qfontengine_ft_p.h
+++ b/src/gui/text/qfontengine_ft_p.h
@@ -234,6 +234,7 @@ private:
     QImage alphaMapForGlyph(glyph_t, QFixed) Q_DECL_OVERRIDE;
     QImage alphaMapForGlyph(glyph_t glyph, QFixed subPixelPosition, const QTransform &t) Q_DECL_OVERRIDE;
     QImage alphaRGBMapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t) Q_DECL_OVERRIDE;
+    QImage bitmapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t);
     glyph_metrics_t alphaMapBoundingBox(glyph_t glyph,
                                         QFixed subPixelPosition,
                                         const QTransform &matrix,
diff --git a/src/gui/text/qplatformfontdatabase.cpp b/src/gui/text/qplatformfontdatabase.cpp
index 0695c2e..4298b0a 100644
--- a/src/gui/text/qplatformfontdatabase.cpp
+++ b/src/gui/text/qplatformfontdatabase.cpp
@@ -48,7 +48,7 @@ QT_BEGIN_NAMESPACE
 void qt_registerFont(const QString &familyname, const QString &stylename,
                      const QString &foundryname, int weight,
                      QFont::Style style, int stretch, bool antialiased,
-                     bool scalable, int pixelSize, bool fixedPitch,
+                     bool color, bool scalable, int pixelSize, bool fixedPitch,
                      const QSupportedWritingSystems &writingSystems, void *hanlde);
 
 void qt_registerFontFamily(const QString &familyName);
@@ -91,7 +91,7 @@ void QPlatformFontDatabase::registerQPF2Font(const QByteArray &dataArray, void *
                 }
             }
             QFont::Stretch stretch = QFont::Unstretched;
-            registerFont(fontName,QString(),QString(),fontWeight,fontStyle,stretch,true,false,pixelSize,false,writingSystems,handle);
+            registerFont(fontName,QString(),QString(),fontWeight,fontStyle,stretch,true,false,false,pixelSize,false,writingSystems,handle);
         }
     } else {
         qDebug() << "header verification of QPF2 font failed. maybe it is corrupt?";
@@ -122,14 +122,14 @@ void QPlatformFontDatabase::registerQPF2Font(const QByteArray &dataArray, void *
 void QPlatformFontDatabase::registerFont(const QString &familyname, const QString &stylename,
                                          const QString &foundryname, QFont::Weight weight,
                                          QFont::Style style, QFont::Stretch stretch, bool antialiased,
-                                         bool scalable, int pixelSize, bool fixedPitch,
+                                         bool color, bool scalable, int pixelSize, bool fixedPitch,
                                          const QSupportedWritingSystems &writingSystems, void *usrPtr)
 {
     if (scalable)
         pixelSize = 0;
 
     qt_registerFont(familyname, stylename, foundryname, weight, style,
-                    stretch, antialiased, scalable, pixelSize,
+                    stretch, antialiased, color, scalable, pixelSize,
                     fixedPitch, writingSystems, usrPtr);
 }
 
diff --git a/src/gui/text/qplatformfontdatabase.h b/src/gui/text/qplatformfontdatabase.h
index 3331d96..1970301 100644
--- a/src/gui/text/qplatformfontdatabase.h
+++ b/src/gui/text/qplatformfontdatabase.h
@@ -121,7 +121,7 @@ public:
     static void registerFont(const QString &familyname, const QString &stylename,
                              const QString &foundryname, QFont::Weight weight,
                              QFont::Style style, QFont::Stretch stretch, bool antialiased,
-                             bool scalable, int pixelSize, bool fixedPitch,
+                             bool color, bool scalable, int pixelSize, bool fixedPitch,
                              const QSupportedWritingSystems &writingSystems, void *handle);
 
     static void registerFontFamily(const QString &familyName);
diff --git a/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp b/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
index 728b166..2a41434 100644
--- a/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
+++ b/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
@@ -262,7 +262,9 @@ QStringList QBasicFontDatabase::addTTFile(const QByteArray &fontData, const QByt
 
         QFont::Stretch stretch = QFont::Unstretched;
 
-        registerFont(family,QString::fromLatin1(face->style_name),QString(),weight,style,stretch,true,true,0,fixedPitch,writingSystems,fontFile);
+        //TODO: need to check possibility of Color bitmap.
+
+        registerFont(family,QString::fromLatin1(face->style_name),QString(),weight,style,stretch,true, false, true,0,fixedPitch,writingSystems,fontFile);
 
         families.append(family);
 
diff --git a/src/platformsupport/fontdatabases/fontconfig/qfontconfigdatabase.cpp b/src/platformsupport/fontdatabases/fontconfig/qfontconfigdatabase.cpp
index 8ebabf3..9c4a672 100644
--- a/src/platformsupport/fontdatabases/fontconfig/qfontconfigdatabase.cpp
+++ b/src/platformsupport/fontdatabases/fontconfig/qfontconfigdatabase.cpp
@@ -369,6 +369,7 @@ static void populateFromPattern(FcPattern *pattern)
     FcChar8 *style_value;
     FcBool scalable;
     FcBool antialias;
+    FcBool color = false;
 
     if (FcPatternGetString(pattern, FC_FAMILY, 0, &value) != FcResultMatch)
         return;
@@ -403,7 +404,10 @@ static void populateFromPattern(FcPattern *pattern)
         style_value = 0;
     if (FcPatternGetBool(pattern,FC_ANTIALIAS,0,&antialias) != FcResultMatch)
         antialias = true;
-
+#if FC_VERSION >= 21194
+    if (FcPatternGetBool(pattern, FC_COLOR, 0, &color) != FcResultMatch)
+        color = false;
+#endif
     QSupportedWritingSystems writingSystems;
     FcLangSet *langset = 0;
     FcResult res = FcPatternGetLangSet(pattern, FC_LANG, 0, &langset);
@@ -461,7 +465,7 @@ static void populateFromPattern(FcPattern *pattern)
     // Note: stretch should really be an int but registerFont incorrectly uses an enum
     QFont::Stretch stretch = QFont::Stretch(stretchFromFcWidth(width_value));
     QString styleName = style_value ? QString::fromUtf8((const char *) style_value) : QString();
-    QPlatformFontDatabase::registerFont(familyName,styleName,QLatin1String((const char *)foundry_value),weight,style,stretch,antialias,scalable,pixel_size,fixedPitch,writingSystems,fontFile);
+    QPlatformFontDatabase::registerFont(familyName,styleName,QLatin1String((const char *)foundry_value),weight,style,stretch,antialias,color,scalable,pixel_size,fixedPitch,writingSystems,fontFile);
 //        qDebug() << familyName << (const char *)foundry_value << weight << style << &writingSystems << scalable << true << pixel_size;
 
     for (int k = 1; FcPatternGetString(pattern, FC_FAMILY, k, &value) == FcResultMatch; ++k)
@@ -518,11 +522,12 @@ void QFontconfigDatabase::populateFontDatabase()
     QSupportedWritingSystems ws;
     ws.setSupported(QFontDatabase::Latin);
 
+    //TODO: default fonts have no color bitmap
     while (f->qtname) {
         QString familyQtName = QString::fromLatin1(f->qtname);
-        registerFont(familyQtName,QString(),QString(),QFont::Normal,QFont::StyleNormal,QFont::Unstretched,true,true,0,f->fixed,ws,0);
-        registerFont(familyQtName,QString(),QString(),QFont::Normal,QFont::StyleItalic,QFont::Unstretched,true,true,0,f->fixed,ws,0);
-        registerFont(familyQtName,QString(),QString(),QFont::Normal,QFont::StyleOblique,QFont::Unstretched,true,true,0,f->fixed,ws,0);
+        registerFont(familyQtName,QString(),QString(),QFont::Normal,QFont::StyleNormal,QFont::Unstretched,true,false,true,0,f->fixed,ws,0);
+        registerFont(familyQtName,QString(),QString(),QFont::Normal,QFont::StyleItalic,QFont::Unstretched,true,false,true,0,f->fixed,ws,0);
+        registerFont(familyQtName,QString(),QString(),QFont::Normal,QFont::StyleOblique,QFont::Unstretched,true,false,true,0,f->fixed,ws,0);
         ++f;
     }
 
@@ -850,6 +855,7 @@ QFont QFontconfigDatabase::defaultFont() const
 
 void QFontconfigDatabase::setupFontEngine(QFontEngineFT *engine, const QFontDef &fontDef) const
 {
+    bool color = fontDef.color;
     bool antialias = !(fontDef.styleStrategy & QFont::NoAntialias);
     bool forcedAntialiasSetting = !antialias;
 
@@ -912,6 +918,11 @@ void QFontconfigDatabase::setupFontEngine(QFontEngineFT *engine, const QFontDef
             if (FcPatternGetBool(match, FC_ANTIALIAS,0, &fc_antialias) == FcResultMatch)
                 antialias = fc_antialias;
         }
+#if FC_VERSION >= 21194
+        FcBool fc_color;
+        if (FcPatternGetBool(match, FC_COLOR, 0, &fc_color) == FcResultMatch)
+            color = fc_color;
+#endif
 
         if (antialias) {
             QFontEngine::SubpixelAntialiasingType subpixelType = QFontEngine::Subpixel_None;
@@ -922,6 +933,8 @@ void QFontconfigDatabase::setupFontEngine(QFontEngineFT *engine, const QFontDef
             format = (subpixelType == QFontEngine::Subpixel_None)
                     ? QFontEngine::Format_A8
                     : QFontEngine::Format_A32;
+        } if (color) {
+            format = QFontEngine::Format_ARGB;
         } else
             format = QFontEngine::Format_Mono;
 
