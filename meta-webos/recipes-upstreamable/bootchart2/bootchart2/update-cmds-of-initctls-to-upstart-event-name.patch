When we want to emit some Upstart events, we're using
'initctl emit (--no-wait) <event_name>'.

This function tries to find 'initctl'-s and change their 'cmd' value
from 'initctl' to '<event_name>' to figure out when '<event_name>'
is emitted by whom
--- a/pybootchartgui/process_tree.py	2013-12-11 23:09:50.348268076 +0900
+++ b/pybootchartgui/process_tree.py	2013-12-11 23:11:13.031548761 +0900
@@ -73,6 +73,7 @@
             p_runs = self.merge_runs(self.process_tree)
             writer.status("pruned %i process, %i exploders, %i threads, and %i runs" % (p_processes, p_exploders, p_threads, p_runs))
 
+        self.update_cmds_of_initctls()
         self.sort(self.process_tree)
 
         self.start_time = self.get_start_time(self.process_tree)
@@ -173,6 +174,28 @@
                         count += 1
             spurious_list = []
 
+    def update_cmds_of_initctls(self):
+        """Upstart hack: When we want to emit some Upstart events, we're using
+           'initctl emit (--no-wait) <event_name>'.
+           This function tries to find 'initctl'-s and change their 'cmd' value
+           from 'initctl' to '<event_name>' to figure out when '<event_name>'
+           is emitted by whom
+        """
+        # This routine assumes that "initctl emit" is used as either
+        # "initctl emit --no-wait <event_name>" or "initctl emit <event_name>"
+        count = 1
+        for proc in self.process_list:
+            index = 1
+            if proc.cmd == "initctl" and proc.args[index] == "emit":
+                #self.writer.status("Upstart event #%d: %s" % (count, proc.args))
+                index += 1
+
+                # If "initctl emit --no-wait <event_name" is used, actual <event_name> is in args[3].
+                if proc.args[index] == "--no-wait":
+                    index += 1
+                proc.cmd = proc.args[index]
+                count += 1
+
     def prune(self, process_subtree, parent):
         """Prunes the process tree by removing idle processes and processes
            that only live for the duration of a single top sample.  Sibling
@@ -195,11 +218,13 @@
             if parent != None or len(p.child_list) == 0:
 
                 prune = False
-                if is_idle_background_process_without_children(p):
-                    prune = True
-                elif p.duration <= 2 * self.sample_period:
+                #if is_idle_background_process_without_children(p):
+                    #prune = True
+                if p.duration <= 2 * self.sample_period:
                     # short-lived process
                     prune = True
+                    if p.cmd == 'initctl' and p.args[1] == 'emit':
+                        prune = False
 
                 if prune:
                     process_subtree.pop(idx)
@@ -270,7 +295,7 @@
         while idx < len(process_subtree)-1:
             p = process_subtree[idx]
             nextp = process_subtree[idx+1]
-            if nextp.cmd == p.cmd:
+            if nextp.cmd == p.cmd and p.cmd != "initctl":
                 process_subtree.pop(idx+1)
                 idx -= 1
                 num_removed += 1
