When Upstart script is executed, Upstart always forks /bin/sh to execute
'script ~ end script' block. So, ppid-s of some processes are set to pid-s
of /bin/sh, not to actual parent processes and this skews the process tree.

This patch tries to find those processes and set their ppid-s to their actual
parent processes.
--- a/pybootchartgui/process_tree.py	2013-12-11 22:30:02.345113058 +0900
+++ b/pybootchartgui/process_tree.py	2013-12-11 23:06:28.194025408 +0900
@@ -53,8 +53,7 @@
         self.sample_period = sample_period
 
         self.build()
-        if not accurate_parentage:
-            self.update_ppids_for_daemons(self.process_list)
+        self.update_ppids_for_processes_executed_by_upstart()
 
         self.start_time = self.get_start_time(self.process_tree)
         self.end_time = self.get_end_time(self.process_tree)
@@ -128,29 +127,51 @@
             return -100000000
         return max( [max(proc.pid, self.get_max_pid(proc.child_list)) for proc in process_subtree] )
 
-    def update_ppids_for_daemons(self, process_list):
-        """Fedora hack: when loading the system services from rc, runuser(1)
-           is used.  This sets the PPID of all daemons to 1, skewing
-           the process tree.  Try to detect this and set the PPID of
-           these processes the PID of rc.
-
+    def update_ppids_for_processes_executed_by_upstart(self):
+        """Upstart hack: when Upstart script is executed, Upstart always
+           forks /bin/sh to execute 'script ~ end script' block. So, ppid-s of
+           some processes are set to pid-s of /bin/sh and this skews the process
+           tree.
+           This function tries to find those processes and set their ppid-s to
+           their actual parent processes.
         """
-        rcstartpid = -1
-        rcendpid = -1
-        rcproc = None
-        for p in process_list:
-            if p.cmd == "rc" and p.ppid // 1000 == 1:
-                rcproc = p
-                rcstartpid = p.pid
-                rcendpid = self.get_max_pid(p.child_list)
-        if rcstartpid != -1 and rcendpid != -1:
-            for p in process_list:
-                if p.pid > rcstartpid and p.pid < rcendpid and p.ppid // 1000 == 1:
-                    p.ppid = rcstartpid
-                    p.parent = rcproc
-            for p in process_list:
-                p.child_list = []
-            self.build()
+        count = 1
+        spurious_list = []
+        for proc in self.process_list:
+            last_proc = proc
+            
+            # This means either 'init' or '/bin/sh' is executed by Upstart (pid = 1)
+            if (proc.cmd == "init" or proc.cmd == "sh") and proc.pid % 1000 == 0 and proc.ppid == 1000:
+                spurious_list.append(proc)
+
+                for rproc in self.process_list:
+                    # If following conditions are satisfied, rproc is a real process executed by Upstart
+                    # - rpid of /bin/sh and actual process should be same
+                    # - pid of the process should be greater than one of /bin/sh
+                    # - rpid of the process should be 1 (Upstart)
+                    if proc.pid // 1000 == rproc.pid // 1000 and proc.pid < rproc.pid and rproc.ppid == 1000:
+                        #self.writer.status("Adding (%s, %d, %d) to the list..." % (rproc.cmd, rproc.pid, rproc.ppid))
+
+                        spurious_list.append(rproc)
+                        last_proc = rproc
+	
+                if len(spurious_list) >= 2 and last_proc.cmd != "sh":
+                    # Pop last_proc before searching the list
+                    spurious_list.pop()
+
+                    for temp in spurious_list:
+                        #self.writer.status("Upstart hack #%d: proc (%s, %d, %d) ==> rproc (%s, %d, %d)" \
+                        #                   % (count, temp.cmd, temp.pid, temp.ppid, last_proc.cmd, last_proc.pid, last_proc.ppid))
+
+                        for child in temp.child_list:
+                            #self.writer.status("    child(%s): %d ==> %d" % (child.cmd, child.ppid, last_proc.pid))
+
+                            child.ppid = last_proc.pid
+                            child.parent = last_proc
+                            last_proc.child_list.append(child)
+                        temp.child_list = []
+                        count += 1
+            spurious_list = []
 
     def prune(self, process_subtree, parent):
         """Prunes the process tree by removing idle processes and processes
