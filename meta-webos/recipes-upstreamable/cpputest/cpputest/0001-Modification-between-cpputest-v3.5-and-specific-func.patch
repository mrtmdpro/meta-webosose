From ca449cd19d0fedb0dda026b0c748ff9377c12218 Mon Sep 17 00:00:00 2001
From: "hwachun.yeo" <hwachun.yeo@lge.com>
Date: Fri, 1 Nov 2013 15:32:49 +0900
Subject: [PATCH] Modification between cpputest-v3.5 and specific function in our agent module.

If we will activate the "memory leak detection mode". "new" and "delete" macro in "include/MemoryLeakDetectorNewMacros.h" file is also enabled.
And, there is occur fatal running error in other the C++ binary. That situation have occured at 2012 October.
When the value of the variable in the test case is too large, segment-fault occurs.(Case TestFailure :: createButWasString).
Changes in the type of the variable of TestResult.cpp, TestOutput.cpp(Case TestOutput :: printTestsEnded) compile error occurs in the sequence.

Upstream-Status: Inappropriate [configuration]
Signed-off-by: Hwachun Yeo <hwachun.yeo@lge.com>
---
 CMakeLists.txt                         |    2 +-
 src/CppUTest/CMakeLists.txt            |    3 +-
 src/CppUTest/CommandLineTestRunner.cpp |   25 +++++++++++------
 src/CppUTest/TestFailure.cpp           |   19 +++++++++++++
 src/CppUTest/TestOutput.cpp            |   47 ++++++++++++++++++++++++++++++++
 5 files changed, 85 insertions(+), 11 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 945f42c..177cc82 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,7 +9,7 @@ cmake_minimum_required(VERSION 2.6.3)
 option(STD_C "Use the standard C library" ON)
 option(STD_CPP "Use the standard C++ library" ON)
 option(CPPUTEST_FLAGS "Use the CFLAGS/CXXFLAGS/LDFLAGS set by CppUTest" ON)
-option(MEMORY_LEAK_DETECTION "Enable memory leak detection" ON)
+option(MEMORY_LEAK_DETECTION "Enable memory leak detection" OFF)
 option(EXTENSIONS "Use the CppUTest extenstion library" ON)
 option(MAP_FILE "Enable the creation of a map file" OFF)
 option(COVERAGE "Enable running with coverage" OFF)
diff --git a/src/CppUTest/CMakeLists.txt b/src/CppUTest/CMakeLists.txt
index 5eba724..4e1921c 100644
--- a/src/CppUTest/CMakeLists.txt
+++ b/src/CppUTest/CMakeLists.txt
@@ -44,10 +44,11 @@ set(CppUTest_headers
         ${CppUTestRootDirectory}/include/CppUTest/UtestMacros.h
 )
 
-add_library(CppUTest STATIC ${CppUTest_src})
+add_library(CppUTest SHARED ${CppUTest_src})
 if (WIN32)
     target_link_libraries(CppUTest winmm.lib)
 endif (WIN32)
+set_target_properties(CppUTest PROPERTIES VERSION 1.0.0 SOVERSION 1)
 install(FILES ${CppUTest_headers} DESTINATION include/CppUTest)
 install(TARGETS CppUTest
     RUNTIME DESTINATION bin
diff --git a/src/CppUTest/CommandLineTestRunner.cpp b/src/CppUTest/CommandLineTestRunner.cpp
index 16cc7b4..2f87a85 100644
--- a/src/CppUTest/CommandLineTestRunner.cpp
+++ b/src/CppUTest/CommandLineTestRunner.cpp
@@ -53,17 +53,18 @@ int CommandLineTestRunner::RunAllTests(int ac, const char** av)
 	int result = 0;
 	ConsoleTestOutput output;
 
-	MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
-	memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
-	TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
-
+//	MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
+//	memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
+//	TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
+	//TODO 연속 동작시 레치 발생.
 	{
 		CommandLineTestRunner runner(ac, av, &output, TestRegistry::getCurrentRegistry());
 		result = runner.runAllTestsMain();
 	}
 
 	if (result == 0) {
-		output << memLeakWarn.FinalReport(0);
+//		output << memLeakWarn.FinalReport(0);
+	//TODO 레치 발생 관련. 
 	}
 	TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 	return result;
@@ -73,13 +74,13 @@ int CommandLineTestRunner::runAllTestsMain()
 {
 	int testResult = 0;
 
-	SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
-	registry_->installPlugin(&pPlugin);
-
+//	SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
+//	registry_->installPlugin(&pPlugin);
+	//TODO 연속 동작시 레치 발생.
 	if (parseArguments(registry_->getFirstPlugin()))
 		testResult = runAllTests();
 
-	registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
+//	registry_->removePluginByName(DEF_PLUGIN_SET_POINTER); //레치 발생 관련.
 	return testResult;
 }
 
@@ -141,3 +142,9 @@ TestFilter CommandLineTestRunner::getNameFilter()
 {
 	return arguments_->getNameFilter();
 }
+
+//cpputest so를 포함한 프로세스가 실행시킬 cpputest의 실행부분
+extern "C" void CommandLineTestRunnerStart(int argc, char * argv[])
+{
+	CommandLineTestRunner::RunAllTests(argc, argv);
+}
diff --git a/src/CppUTest/TestFailure.cpp b/src/CppUTest/TestFailure.cpp
index cf06dad..2945205 100644
--- a/src/CppUTest/TestFailure.cpp
+++ b/src/CppUTest/TestFailure.cpp
@@ -29,6 +29,10 @@
 #include "CppUTest/TestFailure.h"
 #include "CppUTest/TestOutput.h"
 #include "CppUTest/PlatformSpecificFunctions.h"
+#include <stdlib.h>
+#include <string.h>
+
+#define COMPARE_VALUE_MAX_SIZE 128
 
 static SimpleString removeAllPrintableCharactersFrom(const SimpleString& str)
 {
@@ -124,8 +128,23 @@ bool TestFailure::isInHelperFunction() const
 	return lineNumber_ < testLineNumber_;
 }
 
+//testagent 테스트에이전트에서 사용할 에러내용. 12.05.27
+char failExpectedArr[COMPARE_VALUE_MAX_SIZE];
+char failActualArr[COMPARE_VALUE_MAX_SIZE];
+
 SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
 {
+	if( strlen( expected.asCharString() ) +1 > COMPARE_VALUE_MAX_SIZE )
+	{
+		strcpy( failExpectedArr, "COMPARE_VALUE_MAX_SIZE Over" );
+		strcpy( failActualArr, "COMPARE_VALUE_MAX_SIZE Over" );
+	}
+	else
+	{
+		strcpy( failExpectedArr, expected.asCharString() );
+		strcpy( failActualArr, actual.asCharString() );
+	}
+//	const char* format = "expected <%s>\n\tbut was  <%s>"; //3.5에서 불필요 //strictmd
 	return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 }
 
diff --git a/src/CppUTest/TestOutput.cpp b/src/CppUTest/TestOutput.cpp
index 72941bf..a7300ce 100644
--- a/src/CppUTest/TestOutput.cpp
+++ b/src/CppUTest/TestOutput.cpp
@@ -28,6 +28,10 @@
 #include "CppUTest/TestHarness.h"
 #include "CppUTest/TestOutput.h"
 #include "CppUTest/PlatformSpecificFunctions.h"
+#include <stdlib.h>
+#include <string.h>
+
+#define COMPARE_VALUE_MAX_SIZE 128
 
 TestOutput::WorkingEnvironment TestOutput::workingEnvironment_ = TestOutput::detectEnvironment;
 
@@ -134,8 +138,21 @@ void TestOutput::flush()
 {
 }
 
+//testagent 테스트에이전트에서 사용할 결과 내용. 12.05.27
+int gFailureCount;
+int gTestCount;
+int gRunCount;
+int gCheckCount;
+int gIgnoredCount;
+int gFilteredOutCount;
+long int gTotalExecutionTime; //strictmd
+
 void TestOutput::printTestsEnded(const TestResult& result)
 {
+	print("\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n");
+	print("@@@	Test Results!!!	@@@\n");
+	print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n");
+	
 	if (result.getFailureCount() > 0) {
 		print("\nErrors (");
 		print(result.getFailureCount());
@@ -156,6 +173,16 @@ void TestOutput::printTestsEnded(const TestResult& result)
 	print(" filtered out, ");
 	print(result.getTotalExecutionTime());
 	print(" ms)\n\n");
+
+	print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n");
+
+	gFailureCount = result.getFailureCount();
+	gTestCount = result.getTestCount();
+	gRunCount = result.getRunCount();
+	gCheckCount = result.getCheckCount();
+	gIgnoredCount = result.getIgnoredCount();
+	gFilteredOutCount = result.getFilteredOutCount();
+	gTotalExecutionTime = result.getTotalExecutionTime();
 }
 
 void TestOutput::printTestRun(int number, int total)
@@ -169,6 +196,13 @@ void TestOutput::printTestRun(int number, int total)
 	}
 }
 
+//testagent 테스트에이전트에서 사용할 에러내용. 12.05.27
+//const char *pFileName;  //ta에서 extern으로 사용할시에 문장 맨 왼편에 4바이트가 망가짐.
+char pFileName[COMPARE_VALUE_MAX_SIZE];
+int iFailureLineNumber;
+const char *pTestName;
+const char *pReason;
+
 void TestOutput::print(const TestFailure& failure)
 {
 	if (failure.isOutsideTestFile() || failure.isInHelperFunction())
@@ -190,12 +224,24 @@ void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
 {
 	printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 	printFailureInTest(failure.getTestName());
+	
+	if( strlen( (failure.getFileName()).asCharString() ) +1 > COMPARE_VALUE_MAX_SIZE )
+	{
+		strcpy( pFileName, "COMPARE_VALUE_MAX_SIZE Over");
+	}
+	else
+	{
+		strcpy( pFileName, (failure.getFileName()).asCharString() );
+	}	
+//	pFileName = (failure.getFileName()).asCharString();
+	iFailureLineNumber = failure.getFailureLineNumber();	
 }
 
 void TestOutput::printFailureInTest(SimpleString testName)
 {
 	print(" Failure in ");
 	print(testName.asCharString());
+	pTestName = testName.asCharString();
 }
 
 void TestOutput::printFailureMessage(SimpleString reason)
@@ -204,6 +250,7 @@ void TestOutput::printFailureMessage(SimpleString reason)
 	print("\t");
 	print(reason.asCharString());
 	print("\n\n");
+	pReason = reason.asCharString();	
 }
 
 void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, int lineNumber)
-- 
1.7.9.5

