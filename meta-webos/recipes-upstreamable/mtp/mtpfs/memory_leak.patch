--- mtpfs-1.1/mtpfs.c	2013-11-26 15:39:07.990322616 +0900
+++ mtpfs-1.1-new/mtpfs.c	2013-11-26 15:55:35.387971595 +0900
@@ -163,7 +163,9 @@
     playlist->name=g_strdup(playlist_name);
 
     file = fdopen(fi->fh,"r");
+    if (!file) return ret;
     while (fgets(item_path,sizeof(item_path)-1,file) != NULL){
+	 item_path[sizeof(item_path)-1] = '\0';
         g_strchomp(item_path);
         item_id = parse_path(item_path);
         if (item_id != -1) {
@@ -201,6 +203,8 @@
         ret = LIBMTP_Create_New_Playlist(device,playlist);
     }
     playlists_changed=TRUE;
+    g_free(playlist_name);
+    fclose(file);
     return ret;
 }
 
@@ -415,16 +419,22 @@
     gchar **fields;
     gchar *directory;
     directory = (gchar *) g_malloc (strlen (path));
-    directory = strcpy (directory, "");
+    directory = strncpy (directory, "", strlen (path));
     fields = g_strsplit (path, "/", -1);
     res = -ENOENT;
     int storageid;
     storageid = find_storage(path);
+    if (storageid < 0)
+    {
+    	g_free (directory);
+	g_strfreev (fields);
+    	return res;
+    }
     for (i = 0; fields[i] != NULL; i++) {
         if (strlen (fields[i]) > 0) {
             if (fields[i + 1] != NULL) {
-                directory = strcat (directory, "/");
-                directory = strcat (directory, fields[i]);
+                directory = strncat (directory, "/", strlen (path));
+                directory = strncat (directory, fields[i], strlen (path));
             } else {
                 check_folders();
                 folder = storageArea[storageid].folders;
@@ -450,8 +460,8 @@
                 file = file->next;
             }
             if (item_id < 0) {
-                directory = strcat (directory, "/");
-                directory = strcat (directory, fields[i]);
+                directory = strncat (directory, "/", strlen (path));
+                directory = strncat (directory, fields[i], strlen (path));
                 item_id = lookup_folder_id (folder, directory, NULL);
                 res = item_id;
 				break;
@@ -487,12 +497,16 @@
             gchar **fields;
             gchar *directory;
             directory = (gchar *) g_malloc (strlen (path));
-            directory = strcpy (directory, "/");
+            directory = strncpy (directory, "/", strlen (path));
             fields = g_strsplit (path, "/", -1);
             int i;
             int parent_id = 0;
             int storageid;
             storageid = find_storage(fields[0]);
+	     if (storageid < 0) {
+			close (fi->fh);
+			return_unlock(0);
+	     }
             for (i = 0; fields[i] != NULL; i++) {
                 if (strlen (fields[i]) > 0) {
                     if (fields[i + 1] == NULL) {
@@ -504,8 +518,8 @@
 						g_free (filename);
                         filename = g_strdup (fields[i]);
                     } else {
-                        directory = strcat (directory, fields[i]);
-                        directory = strcat (directory, "/");
+                        directory = strncat (directory, fields[i], strlen (path));
+                        directory = strncat (directory, "/", strlen (path));
                     }
                 }
             }
@@ -713,6 +727,7 @@
     int i;
     int storageid = -1;
     storageid=find_storage(path);
+    if (storageid < 0) return_unlock(0);
     // Get folder listing.
     int folder_id = 0;
     if (strcmp (path, "/") != 0) {
@@ -725,7 +740,7 @@
     if (folder_id==-2) {
         DBG("Root of storage area");
         folder=storageArea[storageid].folders;
-    	if (folder == NULL) return_unlock(0);
+  	if (folder == NULL) return_unlock(0);
     } else {
         folder = LIBMTP_Find_Folder (storageArea[storageid].folders, folder_id);
         if (folder == NULL) return_unlock(0);
@@ -818,30 +833,36 @@
         while (playlist != NULL) {
             gchar *tmppath;
             tmppath = g_strconcat("/Playlists/",playlist->name,".m3u",NULL);
-            if (g_ascii_strcasecmp(path,tmppath) == 0) {
-                int filesize = 0;
-                int i;
-                for (i=0; i <playlist->no_tracks; i++){
-                    LIBMTP_file_t *file;
-                    LIBMTP_folder_t *folder;
-                    file = LIBMTP_Get_Filemetadata(device,playlist->tracks[i]);
-                    if (file != NULL) {
-                        int parent_id = file->parent_id;
-                        filesize = filesize + strlen(file->filename) + 2;
-                        while (parent_id != 0) {
-                            check_folders();
-                            folder = LIBMTP_Find_Folder(storageArea[i].folders,parent_id);
-                            parent_id = folder->parent_id;
-                            filesize = filesize + strlen(folder->name) + 1;
-                        }
-                    }
-                }
-                stbuf->st_mode = S_IFREG | 0777;
-                stbuf->st_size = filesize;
-                stbuf->st_blocks = 2;
-                stbuf->st_mtime = time(NULL);
-                return_unlock(0);
-            }
+	     if (tmppath)
+	     {
+	            if (g_ascii_strcasecmp(path,tmppath) == 0) {
+	                int filesize = 0;
+	                int i;
+	                for (i=0; i <playlist->no_tracks; i++){
+	                    LIBMTP_file_t *file;
+	                    LIBMTP_folder_t *folder;
+	                    file = LIBMTP_Get_Filemetadata(device,playlist->tracks[i]);
+	                    if (file != NULL) {
+	                        int parent_id = file->parent_id;
+	                        filesize = filesize + strlen(file->filename) + 2;
+	                        while (parent_id != 0) {
+	                            check_folders();
+	                            folder = LIBMTP_Find_Folder(storageArea[i].folders,parent_id);
+	                            parent_id = folder->parent_id;
+	                            filesize = filesize + strlen(folder->name) + 1;
+	                        }
+				   g_free (file);
+	                    }
+	                }
+	                stbuf->st_mode = S_IFREG | 0777;
+	                stbuf->st_size = filesize;
+	                stbuf->st_blocks = 2;
+	                stbuf->st_mtime = time(NULL);
+			  g_free (tmppath);	
+	                return_unlock(0);
+	            }
+		     g_free (tmppath);
+	     	}
             playlist = playlist->next;   
         }
         return_unlock(-ENOENT);
@@ -870,39 +891,45 @@
 
     int item_id = -1;
     check_folders();
-    item_id = lookup_folder_id (storageArea[storageid].folders, (gchar *) path, NULL);
-    if (item_id >= 0) {
-        // Must be a folder
-        stbuf->st_ino = item_id;
-        stbuf->st_mode = S_IFDIR | 0777;
-        stbuf->st_nlink = 2;
-    } else {
-        // Must be a file
-        item_id = parse_path (path);
-        LIBMTP_file_t *file;
-        DBG("id:path=%d:%s", item_id, path);
-        check_files();
-        file = files;
-        gboolean found = FALSE;
-        while (file != NULL) {
-            if (file->item_id == item_id) {
-                stbuf->st_ino = item_id;
-                stbuf->st_size = file->filesize;
-                stbuf->st_blocks = (file->filesize / 512) +
-                    (file->filesize % 512 > 0 ? 1 : 0);
-                stbuf->st_nlink = 1;
-                stbuf->st_mode = S_IFREG | 0777;
-                DBG("time:%s",ctime(&(file->modificationdate)));
-                stbuf->st_mtime = file->modificationdate;
-                stbuf->st_ctime = file->modificationdate;
-                stbuf->st_atime = file->modificationdate;
-                found = TRUE;
-            }
-            file = file->next;
-        }
-        if (!found) {
-            ret = -ENOENT;
-        }
+    if (storageid >= 0)
+    {
+	    item_id = lookup_folder_id (storageArea[storageid].folders, (gchar *) path, NULL);
+	    if (item_id >= 0) {
+	        // Must be a folder
+	        stbuf->st_ino = item_id;
+	        stbuf->st_mode = S_IFDIR | 0777;
+	        stbuf->st_nlink = 2;
+	    } else {
+	        // Must be a file
+	        item_id = parse_path (path);
+	        LIBMTP_file_t *file;
+	        DBG("id:path=%d:%s", item_id, path);
+	        check_files();
+	        file = files;
+	        gboolean found = FALSE;
+	        while (file != NULL) {
+	            if (file->item_id == item_id) {
+	                stbuf->st_ino = item_id;
+	                stbuf->st_size = file->filesize;
+	                stbuf->st_blocks = (file->filesize / 512) +
+	                    (file->filesize % 512 > 0 ? 1 : 0);
+	                stbuf->st_nlink = 1;
+	                stbuf->st_mode = S_IFREG | 0777;
+	                DBG("time:%s",ctime(&(file->modificationdate)));
+	                stbuf->st_mtime = file->modificationdate;
+	                stbuf->st_ctime = file->modificationdate;
+	                stbuf->st_atime = file->modificationdate;
+	                found = TRUE;
+	            }
+	            file = file->next;
+	        }
+	        if (!found) {
+	            ret = -ENOENT;
+	        }
+	    }
+    }
+    else {
+		ret = -ENOENT;
     }
 
     return ret;
@@ -951,10 +978,10 @@
     int storageid;
     storageid=find_storage(path);
     FILE *filetmp = tmpfile ();
-    int tmpfile = fileno (filetmp);
-    if (tmpfile != -1) {
+    int tTmpfile = fileno (filetmp);
+    if (tTmpfile != -1) {
         if (item_id == 0) {
-            fi->fh = tmpfile;
+            fi->fh = tTmpfile;
         } else if (strncmp("/Playlists/",path,11) == 0) {
             // Is a playlist
             gchar **fields;
@@ -962,7 +989,7 @@
             gchar *name;
             name = g_strndup(fields[2],strlen(fields[2])-4);
             g_strfreev(fields);
-            fi->fh = tmpfile;
+            fi->fh = tTmpfile;
             LIBMTP_playlist_t *playlist;
             check_playlists();
             playlist = playlists;
@@ -975,20 +1002,24 @@
                         LIBMTP_folder_t *folder;
                         file = LIBMTP_Get_Filemetadata(device,playlist->tracks[i]);
                         if (file != NULL) {
-                            gchar *path;
-                            path = (gchar *) g_malloc (1024);
-                            path = strcpy(path,"/");
+                            gchar *tpath;
+                            tpath = (gchar *) g_malloc (1024);
+                            tpath = strncpy(tpath,"/",1024);
                             int parent_id = file->parent_id;
                             while (parent_id != 0) {
                                 check_folders();
-                                folder = LIBMTP_Find_Folder(storageArea[storageid].folders,parent_id);
-                                path = strcat(path,folder->name);
-                                path = strcat(path,"/");
-                                parent_id = folder->parent_id;
+				    if (storageid >= 0)
+				    {
+	                                folder = LIBMTP_Find_Folder(storageArea[storageid].folders,parent_id);
+	                                tpath = strncat(tpath,folder->name,1024);
+	                                tpath = strncat(tpath,"/",1024);
+	                                parent_id = folder->parent_id;
+				    }
                             }
-                            path = strcat (path,file->filename);
-                            fprintf (filetmp,"%s\n",path);
-                            DBG("%s\n",path);
+                            tpath = strncat (tpath,file->filename,1024);
+                            fprintf (filetmp,"%s\n",tpath);
+                            DBG("%s\n",tpath);
+				g_free (file);
                         }
                     }
                     //LIBMTP_destroy_file_t(file);
@@ -997,12 +1028,13 @@
                 }
                 playlist=playlist->next;
             }
+	     g_free(name);
         } else {
             int ret =
-                LIBMTP_Get_File_To_File_Descriptor (device, item_id, tmpfile,
+                LIBMTP_Get_File_To_File_Descriptor (device, item_id, tTmpfile,
                                                     NULL, NULL);
             if (ret == 0) {
-                fi->fh = tmpfile;
+                fi->fh = tTmpfile;
             } else {
                 return_unlock(-ENOENT);
             }
@@ -1088,7 +1120,7 @@
         gchar *directory;
 	
         directory = (gchar *) g_malloc (strlen (path));
-        directory = strcpy (directory, "/");
+        directory = strncpy (directory, "/", strlen (path));
         fields = g_strsplit (path, "/", -1);
         int i;
         uint32_t parent_id = 0;
@@ -1098,14 +1130,12 @@
                     gchar *tmp = g_strndup (directory, strlen (directory) - 1);
                     check_folders();
                     parent_id = lookup_folder_id (storageArea[storageid].folders, tmp, NULL);
-					g_free (tmp);
-                    if (parent_id < 0)
-                        parent_id = 0;
-					g_free (filename);
+			g_free (tmp);
+			g_free (filename);
                     filename = g_strdup (fields[i]);
                 } else {
-                    directory = strcat (directory, fields[i]);
-                    directory = strcat (directory, "/");
+                    directory = strncat (directory, fields[i], strlen (path));
+                    directory = strncat (directory, "/", strlen (path));
                 }
             }
         }
@@ -1146,6 +1176,8 @@
         return_unlock(0);
     }
     int storageid=find_storage(path);
+    if (storageid < 0)
+		return_unlock(-ENOENT);
     folder_id = lookup_folder_id (storageArea[storageid].folders, (gchar *) path, NULL);
     if (folder_id < 0)
         return_unlock(-ENOENT);
@@ -1209,6 +1241,7 @@
 	
     int storageid_old=find_storage(oldname);
     int storageid_new=find_storage(newname);
+    if (storageid_old < 0 || storageid_new <0) return_unlock(-ENOENT);
     if (strcmp (oldname, "/") != 0) {
         folder_id = lookup_folder_id (storageArea[storageid_old].folders, (gchar *) oldname, NULL);
     }
@@ -1296,6 +1329,7 @@
 mtpfs_blank()
 {
     // Do nothing
+    return 0;
 }
 
 static struct fuse_operations mtpfs_oper = {
