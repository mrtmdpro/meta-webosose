From 6c2dacac31670b436fd7bb1b784570d82f930f24 Mon Sep 17 00:00:00 2001
From: Lokesh Kumar Goel <lokeshkumar.goel@lge.com>
Date: Mon, 28 Aug 2017 14:01:48 -0700
Subject: [PATCH] implement function chroot in process module

:Release Notes:
Implement chroot function in nodejs

:Detailed Notes:
Current implementation of fork server does not support jailer mode
because of lack of native support in nodejs. This change implements
function `chroot' in `process' module in nodejs. As a result, it
becomes possible to implement jailer mode in fork server.

:Testing Performed:
Locally build and tested.

:QA Notes:

:Issues Addressed:
[DRD-10772] Implement jailer support for node fork server and unified services

Change-Id: I1c85be227165a630c48e688163d63ff1be1a8d43
Open-webOS-DCO-1.0-Signed-off-by: Ievgen Sherstobitov <ievgen.sherstobitov@lge.com>
Reviewed-on: https://g2g.lgsvl.com/7890
Reviewed-by: Andrii Koval <andrii.koval@lge.com>
Reviewed-by: Anastasia Timoshchuk <anastasia.timoshchuk@lge.com>
Reviewed-by: Ievgen Sherstobitov <ievgen.sherstobitov@lge.com>
Tested-by: Ievgen Sherstobitov <ievgen.sherstobitov@lge.com>
Reviewed-by: Sergiy Kryvonos <sergiy.kryvonos@lge.com>

---
 deps/uv/include/uv.h    |  2 ++
 deps/uv/src/unix/core.c |  8 ++++++++
 deps/v8/src/d8-posix.cc | 28 ++++++++++++++++++++++++++++
 deps/v8/src/d8.h        |  1 +
 src/node.cc             | 15 +++++++++++++++
 5 files changed, 54 insertions(+)

diff --git a/deps/uv/include/uv.h b/deps/uv/include/uv.h
index 31f09f0..1dd992e 100644
--- a/deps/uv/include/uv.h
+++ b/deps/uv/include/uv.h
@@ -1385,6 +1385,8 @@ UV_EXTERN int uv_cwd(char* buffer, size_t* size);
 
 UV_EXTERN int uv_chdir(const char* dir);
 
+UV_EXTERN int uv_chroot(const char* dir);
+
 UV_EXTERN uint64_t uv_get_free_memory(void);
 UV_EXTERN uint64_t uv_get_total_memory(void);
 
diff --git a/deps/uv/src/unix/core.c b/deps/uv/src/unix/core.c
index 1ec549c..b20ff37 100644
--- a/deps/uv/src/unix/core.c
+++ b/deps/uv/src/unix/core.c
@@ -698,6 +698,14 @@ int uv_chdir(const char* dir) {
 }
 
 
+int uv_chroot(const char* dir) {
+  if (chroot(dir))
+    return -errno;
+
+  return 0;
+}
+
+
 void uv_disable_stdio_inheritance(void) {
   int fd;
 
diff --git a/deps/v8/src/d8-posix.cc b/deps/v8/src/d8-posix.cc
index 36d83b5..d2c8180 100644
--- a/deps/v8/src/d8-posix.cc
+++ b/deps/v8/src/d8-posix.cc
@@ -579,6 +579,31 @@ void Shell::ChangeDirectory(const v8::FunctionCallbackInfo<v8::Value>& args) {
 }
 
 
+void Shell::ChangeRootDirectory(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  if (args.Length() != 1) {
+    const char* message = "chroot() takes one argument";
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), message, NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+  String::Utf8Value directory(args[0]);
+  if (*directory == NULL) {
+    const char* message = "os.chroot(): String conversion of argument failed.";
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), message, NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+  if (chroot(*directory) != 0) {
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), strerror(errno), NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+}
+
+
 void Shell::SetUMask(const v8::FunctionCallbackInfo<v8::Value>& args) {
   if (args.Length() != 1) {
     const char* message = "umask() takes one argument";
@@ -774,6 +799,9 @@ void Shell::AddOSMethods(Isolate* isolate, Local<ObjectTemplate> os_templ) {
   os_templ->Set(String::NewFromUtf8(isolate, "setenv", NewStringType::kNormal)
                     .ToLocalChecked(),
                 FunctionTemplate::New(isolate, SetEnvironment));
+  os_templ->Set(String::NewFromUtf8(isolate, "chroot", NewStringType::kNormal)
+                    .ToLocalChecked(),
+                FunctionTemplate::New(isolate, ChangeRootDirectory));
   os_templ->Set(String::NewFromUtf8(isolate, "unsetenv", NewStringType::kNormal)
                     .ToLocalChecked(),
                 FunctionTemplate::New(isolate, UnsetEnvironment));
diff --git a/deps/v8/src/d8.h b/deps/v8/src/d8.h
index 321d9c1..9fea2f9 100644
--- a/deps/v8/src/d8.h
+++ b/deps/v8/src/d8.h
@@ -429,6 +429,7 @@ class Shell : public i::AllStatic {
   // the "mkdir -p" command.
   static void System(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void ChangeDirectory(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ChangeRootDirectory(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void SetEnvironment(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void UnsetEnvironment(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void SetUMask(const v8::FunctionCallbackInfo<v8::Value>& args);
diff --git a/src/node.cc b/src/node.cc
index 73ed460..b1dfb81 100644
--- a/src/node.cc
+++ b/src/node.cc
@@ -1886,6 +1886,19 @@ static void Chdir(const FunctionCallbackInfo<Value>& args) {
   }
 }
 
+static void Chroot(const FunctionCallbackInfo<Value>& args) {
+  Environment* env = Environment::GetCurrent(args);
+
+  if (args.Length() != 1 || !args[0]->IsString()) {
+    return env->ThrowTypeError("Bad argument.");
+  }
+
+  node::Utf8Value path(args.GetIsolate(), args[0]);
+  int err = uv_chroot(*path);
+  if (err) {
+    return env->ThrowUVException(err, "uv_chroot");
+  }
+}
 
 static void Cwd(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
@@ -3416,6 +3429,8 @@ void SetupProcessObject(Environment* env,
   env->SetMethod(process, "reallyExit", Exit);
   env->SetMethod(process, "abort", Abort);
   env->SetMethod(process, "chdir", Chdir);
+  env->SetMethod(process, "chroot", Chroot);
+
   env->SetMethod(process, "cwd", Cwd);
 
   env->SetMethod(process, "umask", Umask);
