From 8ad4fd828740b7cc40233e782b0349bdfb420cee Mon Sep 17 00:00:00 2001
From: Sergii Nikolaiev <sergii.nikolaiev@lge.com>
Date: Thu, 28 May 2015 22:07:21 +0300
Subject: [PATCH] Implement libuv`s basic fork safety

:Release Notes:
Implement libuv`s basic fork safety

:Detailed Notes:
Reinitialize libuv`s backend_fd.
Reinitialize signal delivery.
Reinitialize async_watcher.
Reinitialize platform loop.

:Testing Performed:
Tested manually on TV using luna-send commands for com.webos.service.favorites:
shows/add and shows/removeAll methods and watched that image shows up and
there is no timeout message in system logs.

:QA Notes:

:Issues Addressed:
[PLAT-499] Using fork for loading new node instance
[PLAT-2209] Image is not displaying in favorite show.
[PLAT-2546] node crashes at location /lib/libc.so.6(gsignal+0x34)

Change-Id: I334313da5f3b9b0b9a9fea6389e7bb08e6ab6ed2
Open-webOS-DCO-1.0-Signed-off-by: Sergii Nikolaiev <sergii.nikolaiev@lge.com>
Reviewed-on: https://gpro.lgsvl.com/111234
Tested-by: Sergii Nikolaiev <sergii.nikolaiev@lge.com>
Reviewed-by: Sergii Nikolaiev <sergii.nikolaiev@lge.com>
Reviewed-by: Tigran Avanesov <tigran.avanesov@lge.com>

---
 deps/uv/src/unix/core.c     |  2 +-
 deps/uv/src/unix/internal.h |  1 +
 deps/uv/src/unix/loop.c     | 79 +++++++++++++++++++++++++++++++++++++++++++++
 deps/uv/src/unix/signal.c   | 10 ++++++
 4 files changed, 91 insertions(+), 1 deletion(-)

diff --git a/deps/uv/src/unix/core.c b/deps/uv/src/unix/core.c
index b20ff37..0b713ae 100644
--- a/deps/uv/src/unix/core.c
+++ b/deps/uv/src/unix/core.c
@@ -272,7 +272,7 @@ static void uv__finish_close(uv_handle_t* handle) {
 }
 
 
-static void uv__run_closing_handles(uv_loop_t* loop) {
+void uv__run_closing_handles(uv_loop_t* loop) {
   uv_handle_t* p;
   uv_handle_t* q;
 
diff --git a/deps/uv/src/unix/internal.h b/deps/uv/src/unix/internal.h
index 1188e8f..f807276 100644
--- a/deps/uv/src/unix/internal.h
+++ b/deps/uv/src/unix/internal.h
@@ -202,6 +202,7 @@ void uv__async_stop(uv_loop_t* loop, struct uv__async* wa);
 void uv__run_idle(uv_loop_t* loop);
 void uv__run_check(uv_loop_t* loop);
 void uv__run_prepare(uv_loop_t* loop);
+void uv__run_closing_handles(uv_loop_t* loop);
 
 /* stream */
 void uv__stream_init(uv_loop_t* loop, uv_stream_t* stream,
diff --git a/deps/uv/src/unix/loop.c b/deps/uv/src/unix/loop.c
index bd63c2f..726eb17 100644
--- a/deps/uv/src/unix/loop.c
+++ b/deps/uv/src/unix/loop.c
@@ -27,6 +27,20 @@
 #include <string.h>
 #include <unistd.h>
 
+static int uv__loop_fork(uv_loop_t* loop);
+static uv_once_t once_guard = UV_ONCE_INIT;
+
+static void uv__loop_fork_child(void) {
+    int res = uv__loop_fork(uv_default_loop()); /* TODO: implement static array of loops that need to be forked */
+    if (res) {
+        abort();
+    }
+}
+
+static void uv__loop_fork_child_init(void) {
+    pthread_atfork(NULL, NULL, uv__loop_fork_child);
+}
+
 int uv_loop_init(uv_loop_t* loop) {
   void* saved_data;
   int err;
@@ -90,6 +104,8 @@ int uv_loop_init(uv_loop_t* loop) {
   uv__handle_unref(&loop->wq_async);
   loop->wq_async.flags |= UV__HANDLE_INTERNAL;
 
+  uv_once(&once_guard, uv__loop_fork_child_init);
+
   return 0;
 
 fail_async_init:
@@ -107,6 +123,69 @@ fail_signal_init:
   return err;
 }
 
+static int uv__loop_fork(uv_loop_t* loop) {
+  QUEUE *q;
+
+  /* CLOSE */
+
+  if (loop->signal_pipefd[0] != -1) {
+    uv__close(loop->signal_pipefd[0]);
+    loop->signal_pipefd[0] = -1;
+  }
+
+  if (loop->signal_pipefd[1] != -1) {
+    uv__close(loop->signal_pipefd[1]);
+    loop->signal_pipefd[1] = -1;
+  }
+
+  uv__platform_loop_delete(loop);
+
+  uv__async_stop(loop, &loop->async_watcher);
+
+  QUEUE_FOREACH(q, &loop->handle_queue) {
+    uv_handle_t *h;
+    h = QUEUE_DATA(q, uv_handle_t, handle_queue);
+    if (h->type == UV_ASYNC) {
+      uv_close(h, NULL);
+    }
+  }
+
+  if (loop->backend_fd != -1) {
+    uv__close(loop->backend_fd);
+    loop->backend_fd = -1;
+  }
+
+  unsigned int i;
+  for (i = 0; i < loop->nwatchers; i++) {
+    if (loop->watchers[i] != NULL)
+      uv__io_close(loop, loop->watchers[i]);
+  }
+  uv__handle_stop(&loop->child_watcher);
+  uv__run_closing_handles(loop);
+
+  /* REINIT */
+
+  uv__signal_global_once_init();
+
+  uv__update_time(loop);
+  loop->timer_counter = 0;
+  loop->stop_flag = 0;
+
+  int err = uv__platform_loop_init(loop);
+  if (err)
+    return err;
+
+  uv_signal_init(loop, &loop->child_watcher);
+  uv__handle_unref(&loop->child_watcher);
+  loop->child_watcher.flags |= UV__HANDLE_INTERNAL;
+
+  if (uv_async_init(loop, &loop->wq_async, uv__work_done))
+    abort();
+  uv__handle_unref(&loop->wq_async);
+  loop->wq_async.flags |= UV__HANDLE_INTERNAL;
+
+  return 0;
+}
 
 void uv__loop_close(uv_loop_t* loop) {
   uv__signal_loop_cleanup(loop);
diff --git a/deps/uv/src/unix/signal.c b/deps/uv/src/unix/signal.c
index dbd8f86..d6c5742 100644
--- a/deps/uv/src/unix/signal.c
+++ b/deps/uv/src/unix/signal.c
@@ -44,6 +44,7 @@ static void uv__signal_stop(uv_signal_t* handle);
 
 
 static uv_once_t uv__signal_global_init_guard = UV_ONCE_INIT;
+static uv_once_t uv__signal_global_fork_init_guard = UV_ONCE_INIT;
 static struct uv__signal_tree_s uv__signal_tree =
     RB_INITIALIZER(uv__signal_tree);
 static int uv__signal_lock_pipefd[2];
@@ -62,9 +63,18 @@ static void uv__signal_global_init(void) {
     abort();
 }
 
+static void uv__signal_reset_global_init_guard() {
+  uv__signal_global_init_guard = UV_ONCE_INIT;
+}
+
+static void uv__signal_global_fork_init(void) {
+  pthread_atfork(NULL, NULL, uv__signal_reset_global_init_guard);
+}
 
 void uv__signal_global_once_init(void) {
   uv_once(&uv__signal_global_init_guard, uv__signal_global_init);
+  uv_once(&uv__signal_global_fork_init_guard, uv__signal_global_fork_init);
+
 }
 
 
