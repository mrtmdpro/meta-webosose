From 1a2ca53126b1849d9eab0e19ed495e1a946b9c37 Mon Sep 17 00:00:00 2001
From: Andrii Koval <andrii.koval@lge.com>
Date: Wed, 29 Jul 2015 11:26:34 +0300
Subject: [PATCH] Optimize V8's JSON parser (second part)

:Release Notes:
Implemented second optimization point to improve memory usage and performance
of JSON parser.

:Detailed Notes:
Main idea for optimization. Add Buffer Manager which allocates string buffer
once for one JSON parser instance and reuses it for another strings. It useful
for SlowScanJsonString() which at the beginning allocates buffer for the input
string convertation.
Notes: If requested buffer bigger than existing, buffer will be reallocated.
Manager will allocate buffer only if parser requests it, and will deallocate
it when JSON parser be destroyed.
Finally, this optimization doesn't work without previos optimization
([DRD-6249]).

:Testing Performed:
Locally performed the original Node.js unit test (make test)
On ..... performed test with parsing different JSON files

:QA Notes:

:Issues Addressed:
[DRD-7031] - Stabilizing the "second" optimization point for the JSON parser.

Change-Id: I37eaf92da2e90d4e811a1ba716385da162ca7d98
Reviewed-on: https://gpro.lgsvl.com/115025
Reviewed-by: Andrii Koval <andrii.koval@lge.com>
Tested-by: Andrii Koval <andrii.koval@lge.com>
Reviewed-by: Sergii Nikolaiev <sergii.nikolaiev@lge.com>
Reviewed-by: Tigran Avanesov <tigran.avanesov@lge.com>

---
 deps/v8/src/json-parser.h | 111 +++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 104 insertions(+), 7 deletions(-)

diff --git a/deps/v8/src/json-parser.h b/deps/v8/src/json-parser.h
index fc057ba..835b85f 100644
--- a/deps/v8/src/json-parser.h
+++ b/deps/v8/src/json-parser.h
@@ -15,9 +15,102 @@
 #include "src/parsing/token.h"
 #include "src/transitions.h"
 
+#include <memory>
+
 namespace v8 {
 namespace internal {
 
+namespace
+{
+//Buffer manager for SlowScanStr functionality
+class SlowScanBufManager
+{
+public:
+  SlowScanBufManager(Isolate* isolate)
+  : isolate_(isolate)
+  , factory_(isolate_->factory())
+  , pretenure_(NOT_TENURED)
+  {
+  }
+
+  ~SlowScanBufManager() {
+  }
+
+  void SetPretenure(PretenureFlag pretenure) {
+    pretenure_ = pretenure;
+  }
+
+  template <typename StringType>
+  Handle<StringType> GetBufString(int length);
+
+  template <typename StringType>
+  Handle<StringType> GetRealStrFromBuf(int length);
+
+private:
+  Isolate* isolate_;
+  Factory* factory_;
+  PretenureFlag pretenure_;
+
+  Handle<SeqTwoByteString> tb_str_;
+  Handle<SeqOneByteString> ob_str_;
+
+  std::auto_ptr<DeferredHandles> tb_deferred_handles_;
+  std::auto_ptr<DeferredHandles> ob_deferred_handles_;
+
+private:
+  SlowScanBufManager(const SlowScanBufManager&);
+  SlowScanBufManager& operator=(const SlowScanBufManager&);
+};
+
+template <>
+inline Handle<SeqTwoByteString> SlowScanBufManager::GetBufString(int length) {
+  if (tb_str_.is_null() || tb_str_->length() < length) {
+    DeferredHandleScope deferred_hs(isolate_);
+    tb_str_ = factory_->NewRawTwoByteString(length, pretenure_).ToHandleChecked();
+    tb_deferred_handles_.reset(deferred_hs.Detach());
+  }
+
+  return tb_str_;
+}
+
+template <>
+inline Handle<SeqOneByteString> SlowScanBufManager::GetBufString(int length) {
+  if (ob_str_.is_null() || ob_str_->length() < length){
+    DeferredHandleScope deferred_hs(isolate_);
+    ob_str_ = factory_->NewRawOneByteString(length, pretenure_).ToHandleChecked();
+    ob_deferred_handles_.reset(deferred_hs.Detach());
+  }
+
+  return ob_str_;
+}
+
+template <>
+Handle<SeqTwoByteString> SlowScanBufManager::GetRealStrFromBuf(int length)
+{
+  Handle<SeqTwoByteString> seq_str = factory_->NewRawTwoByteString(length, pretenure_).ToHandleChecked();
+
+  uc16* tmp_ptr = tb_str_->GetChars();
+  for (int i = 0; i < length; ++i) {
+    seq_str->SeqTwoByteStringSet(i, tmp_ptr[i]);
+  }
+
+  return seq_str;
+}
+
+template <>
+Handle<SeqOneByteString> SlowScanBufManager::GetRealStrFromBuf(int length)
+{
+  Handle<SeqOneByteString> seq_str = factory_->NewRawOneByteString(length, pretenure_).ToHandleChecked();
+
+  uint8_t* tmp_ptr = ob_str_->GetChars();
+  for (int i = 0; i < length; ++i) {
+    seq_str->SeqOneByteStringSet(i, tmp_ptr[i]);
+  }
+
+  return seq_str;
+}
+}
+
 enum ParseElementResult { kElementFound, kElementNotFound, kNullHandle };
 
 
@@ -40,9 +133,11 @@ class JsonParser BASE_EMBEDDED {
         zone_(isolate_->allocator()),
         object_constructor_(isolate_->native_context()->object_function(),
                             isolate_),
-        position_(-1) {
+        position_(-1),
+        buf_manager_(isolate_) {
     source_ = String::Flatten(source_);
     pretenure_ = (source_length_ >= kPretenureTreshold) ? TENURED : NOT_TENURED;
+    buf_manager_.SetPretenure(pretenure_);
 
     // Optimized fast case where we only have Latin1 characters.
     if (seq_one_byte) {
@@ -238,6 +333,8 @@ class JsonParser BASE_EMBEDDED {
   Handle<JSFunction> object_constructor_;
   uc32 c0_;
   int position_;
+
+  SlowScanBufManager buf_manager_;
 };
 
 template <bool seq_one_byte>
@@ -684,8 +781,7 @@ Handle<String> JsonParser<seq_one_byte>::SlowScanJsonString(
   int string_end_position = FindEndOfStr(position_);
   int itput_str_length = string_end_position - position_ + count;
   int length = Min(max_length, itput_str_length);
-  Handle<StringType> seq_string =
-      NewRawString<StringType>(factory(), length, pretenure_);
+  Handle<StringType> seq_string = buf_manager_.GetBufString<StringType>(length);
   // Copy prefix into seq_str.
   SinkChar* dest = seq_string->GetChars();
   String::WriteToFlat(*prefix, dest, start, end);
@@ -695,7 +791,8 @@ Handle<String> JsonParser<seq_one_byte>::SlowScanJsonString(
     if (c0_ < 0x20) return Handle<String>::null();
     if (count >= length) {
       // We need to create a longer sequential string for the result.
-      return SlowScanJsonString<StringType, SinkChar>(seq_string, 0, count);
+      Handle<String> processed_str = buf_manager_.GetRealStrFromBuf<StringType>(count);
+      return SlowScanJsonString<StringType, SinkChar>(processed_str, 0, count);
     }
     if (c0_ != '\\') {
       // If the sink can contain UC16 characters, or source_ contains only
@@ -752,7 +849,8 @@ Handle<String> JsonParser<seq_one_byte>::SlowScanJsonString(
             // char.
             position_ -= 6;  // Rewind position_ to \ in \uxxxx.
             Advance();
-            return SlowScanJsonString<SeqTwoByteString, uc16>(seq_string,
+            Handle<String> processed_str = buf_manager_.GetRealStrFromBuf<StringType>(count);
+            return SlowScanJsonString<SeqTwoByteString, uc16>(processed_str,
                                                               0,
                                                               count);
           }
@@ -768,8 +866,7 @@ Handle<String> JsonParser<seq_one_byte>::SlowScanJsonString(
   // Advance past the last '"'.
   AdvanceSkipWhitespace();
 
-  // Shrink seq_string length to count and return.
-  return SeqString::Truncate(seq_string, count);
+  return buf_manager_.GetRealStrFromBuf<StringType>(count);
 }
 
 
