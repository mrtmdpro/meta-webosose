From 938999c0563a631833726cffd40b9c95ad35e373 Mon Sep 17 00:00:00 2001
From: Hyungjoon Lee <hyungjoon.lee@lge.com>
Date: Fri, 30 Mar 2018 11:50:08 +0900
Subject: [PATCH] Fix crash issue

---
 index.js     | 20 +-------------------
 package.json |  2 +-
 src/uwrap.cc |  8 +++++++-
 3 files changed, 9 insertions(+), 21 deletions(-)

diff --git a/index.js b/index.js
index 83daf2e..d2f8688 100644
--- a/index.js
+++ b/index.js
@@ -3,8 +3,7 @@
 var util = require('util');
 var stream = require('stream');
 var EventEmitter = require('events');
-var uwrap = require('bindings')('uwrap');
-var debug = require('debug')("usocket");
+var uwrap = require('uwrap');
 
 
 //-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----
@@ -20,7 +19,6 @@ function USocket(opts, cb) {
 		duplexOpts = opts.allowHalfOpen;
 	stream.Duplex.call(this, duplexOpts);
 
-	debug("new USocket", opts);
 	if (opts.fd || opts.path)
 		this.connect(opts, cb);
 }
@@ -28,7 +26,6 @@ function USocket(opts, cb) {
 util.inherits(USocket, stream.Duplex);
 
 USocket.prototype._read = function(size) {
-	debug("USocket._read", size);
 	if (this._wrap)
 		this._wrap.resume();
 };
@@ -59,10 +56,8 @@ USocket.prototype._write = function(chunk, encoding, callback) {
 	if (!data && !fds)
 		return callback(new Error("USocket write needs a data or array"));
 
-	debug("USocket._write", data && data.length, fds);
 	var r = this._wrap.write(data, fds);
 	if (util.isError(r)) {
-		debug("USocket._write error", r);
 		return callback(r);
 	}
 	else if (r) {
@@ -70,7 +65,6 @@ USocket.prototype._write = function(chunk, encoding, callback) {
 		return callback();
 	}
 
-	debug("USocket._write wating");
 	this._wrap.drain = this._write.bind(this, chunk, encoding, callback);
 };
 
@@ -85,7 +79,6 @@ USocket.prototype.connect = function(opts, cb) {
 	if (typeof cb === 'function')
 		this.once('connected', cb);
 
-	debug("USocket connect", opts);
 
 	this._wrap = new uwrap.USocketWrap(this._wrapEvent.bind(this));
 	this._wrap.shutdownCalled = false;
@@ -107,12 +100,10 @@ USocket.prototype.connect = function(opts, cb) {
 USocket.prototype._wrapEvent = function(event, a0, a1) {
 	if (event === "connect") {
 		this.fd = a0;
-		debug("USocket connected on " + this.fd);
 		this.emit('connected');
 	}
 
 	if (event === "error") {
-		debug("USocket error", a0);
 		this._wrap.close();
 		this._wrap = null;
 		this.emit("error", a0);
@@ -121,7 +112,6 @@ USocket.prototype._wrapEvent = function(event, a0, a1) {
 
 	if (event === "data") {
 		if (a1 && a1.length > 0) {
-			debug("USocket received file descriptors", a1);
 			this._wrap.fds = this._wrap.fds.concat(a1);
 			this.emit('fds', a1);
 		}
@@ -136,7 +126,6 @@ USocket.prototype._wrapEvent = function(event, a0, a1) {
 		}
 
 		if (!a0 && !a1 && !this._wrap.endReceived) {
-			debug("USocket end of stream received");
 			this._wrap.endReceived = true;
 			this._wrap.pause();
 			this.push(null);
@@ -200,7 +189,6 @@ USocket.prototype.write = function(chunk, encoding, callback) {
 USocket.prototype.end = function(data, encoding, callback) {
 	stream.Duplex.prototype.end.call(this, data, encoding, callback);
 	if (this._wrap) {
-		debug("USocket shutdown");
 		this._wrap.shutdownCalled = true;
 		this._wrap.shutdown();
 		this.read(0);
@@ -218,7 +206,6 @@ USocket.prototype.destroy = function() {
 USocket.prototype.maybeClose = function() {
 	if (!this._wrap || !this._wrap.shutdownCalled || !this._wrap.endReceived)
 		return;
-	debug("USocket closing socket at end");
 	this.destroy();
 	this.emit('close');
 };
@@ -260,9 +247,7 @@ UServer.prototype.listen = function(path, backlog, cb) {
 	if (typeof cb === 'function')
 		this.once('listening', cb);
 
-	debug("creating UServerWrap");
 	this._wrap = new uwrap.UServerWrap(this._wrapEvent.bind(this));
-	debug("start UServerWrap#listen");
 	this._wrap.listen(path, backlog);
 };
 
@@ -288,7 +273,6 @@ UServer.prototype.close = function() {
 UServer.prototype._wrapEvent = function(event, a0, a1) {
 	if (event === "listening") {
 		this.fd = a0;
-		debug("UServer listening on " + this.fd);
 		this.emit('listening');
 		this.listening = true;
 		if (!this.paused)
@@ -296,14 +280,12 @@ UServer.prototype._wrapEvent = function(event, a0, a1) {
 	}
 
 	if (event === "error") {
-		debug("UServer error", a0);
 		this._wrap.close();
 		this._wrap = null;
 		this.emit("error", a0);
 	}
 
 	if (event === "accept") {
-		debug("UServer accepted socket " + a0);
 		var n = new USocket({ fd: a0 });
 		this.emit('connection', n);
 	}
diff --git a/package.json b/package.json
index 52c61cc..5d273e0 100644
--- a/package.json
+++ b/package.json
@@ -28,6 +28,6 @@
   },
   "dependencies": {
     "bindings": "^1.2.1",
-    "nan": "^2.2.0"
+    "nan": "^2.8.0"
   }
 }
diff --git a/src/uwrap.cc b/src/uwrap.cc
index 9161d50..3c9b65a 100644
--- a/src/uwrap.cc
+++ b/src/uwrap.cc
@@ -225,11 +225,17 @@ namespace uwrap {
 			wrap->_resume();
 		}
 
+		static void close_cb(uv_handle_t* poll_handle) {
+			uv_poll_t* thiz = reinterpret_cast<uv_poll_t*>(poll_handle);
+			if (thiz->io_watcher.fd != -1)
+				::close(thiz->io_watcher.fd);
+		}
+
 		void _close() {
 			jscallback.Reset();
 			if (handle != -1) {
 				uv_poll_stop(&uvpoll);
-				::close(handle);
+				uv_close((uv_handle_t*)&uvpoll, close_cb);
 				handle = -1;
 			}
 		}
-- 
1.9.1

